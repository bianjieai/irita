swagger: '2.0'
info:
  title: Irita - Legacy REST and gRPC Gateway docs
  description: 'A REST interface for state queries, legacy transactions'
  version: 1.0.0
paths:
  /node_info:
    get:
      description: Information about the connected node
      summary: The properties of the connected node
      tags:
        - Tendermint RPC
      produces:
        - application/json
      responses:
        '200':
          description: Node status
          schema:
            type: object
            properties:
              application_version:
                properties:
                  build_tags:
                    type: string
                  client_name:
                    type: string
                  commit:
                    type: string
                  go:
                    type: string
                  name:
                    type: string
                  server_name:
                    type: string
                  version:
                    type: string
              node_info:
                properties:
                  id:
                    type: string
                  moniker:
                    type: string
                    example: validator-name
                  protocol_version:
                    properties:
                      p2p:
                        type: string
                        example: 7
                      block:
                        type: string
                        example: 10
                      app:
                        type: string
                        example: 0
                  network:
                    type: string
                    example: Irita-2
                  channels:
                    type: string
                  listen_addr:
                    type: string
                    example: '192.168.56.1:26656'
                  version:
                    description: Tendermint version
                    type: string
                    example: 0.15.0
                  other:
                    description: more information on versions
                    type: object
                    properties:
                      tx_index:
                        type: string
                        example: 'on'
                      rpc_address:
                        type: string
                        example: 'tcp://0.0.0.0:26657'
        '500':
          description: Failed to query node status
  /syncing:
    get:
      summary: Syncing state of node
      tags:
        - Tendermint RPC
      description: Get if the node is currently syning with other nodes
      produces:
        - application/json
      responses:
        '200':
          description: Node syncing status
          schema:
            type: object
            properties:
              syncing:
                type: boolean
        '500':
          description: Server internal error
  /blocks/latest:
    get:
      summary: Get the latest block
      tags:
        - Tendermint RPC
      produces:
        - application/json
      responses:
        '200':
          description: The latest block
          schema:
            type: object
            properties:
              block_meta:
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      chain_id:
                        type: string
                        example: Irita
                      height:
                        type: number
                        example: 1
                      time:
                        type: string
                        example: '2017-12-30T05:53:09.287+01:00'
                      num_txs:
                        type: number
                        example: 0
                      last_block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            example: EE5F3404034C524501629B56E0DDC38FAD651F04
                          parts:
                            type: object
                            properties:
                              total:
                                type: number
                                example: 0
                              hash:
                                type: string
                                example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      total_txs:
                        type: number
                        example: 35
                      last_commit_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      data_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      validators_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      next_validators_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      consensus_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      app_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      last_results_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      evidence_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      proposer_address:
                        type: string
                        description: bech32 encoded address
                        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                      version:
                        type: object
                        properties:
                          block:
                            type: string
                            example: 10
                          app:
                            type: string
                            example: 0
                  block_id:
                    type: object
                    properties:
                      hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      parts:
                        type: object
                        properties:
                          total:
                            type: number
                            example: 0
                          hash:
                            type: string
                            example: EE5F3404034C524501629B56E0DDC38FAD651F04
              block:
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      chain_id:
                        type: string
                        example: Irita
                      height:
                        type: number
                        example: 1
                      time:
                        type: string
                        example: '2017-12-30T05:53:09.287+01:00'
                      num_txs:
                        type: number
                        example: 0
                      last_block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            example: EE5F3404034C524501629B56E0DDC38FAD651F04
                          parts:
                            type: object
                            properties:
                              total:
                                type: number
                                example: 0
                              hash:
                                type: string
                                example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      total_txs:
                        type: number
                        example: 35
                      last_commit_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      data_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      validators_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      next_validators_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      consensus_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      app_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      last_results_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      evidence_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      proposer_address:
                        type: string
                        description: bech32 encoded address
                        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                      version:
                        type: object
                        properties:
                          block:
                            type: string
                            example: 10
                          app:
                            type: string
                            example: 0
                  txs:
                    type: array
                    items:
                      type: string
                  evidence:
                    type: array
                    items:
                      type: string
                  last_commit:
                    type: object
                    properties:
                      block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            example: EE5F3404034C524501629B56E0DDC38FAD651F04
                          parts:
                            type: object
                            properties:
                              total:
                                type: number
                                example: 0
                              hash:
                                type: string
                                example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      precommits:
                        type: array
                        items:
                          type: object
                          properties:
                            validator_address:
                              type: string
                            validator_index:
                              type: string
                              example: '0'
                            height:
                              type: string
                              example: '0'
                            round:
                              type: string
                              example: '0'
                            timestamp:
                              type: string
                              example: '2017-12-30T05:53:09.287+01:00'
                            type:
                              type: number
                              example: 2
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  example: EE5F3404034C524501629B56E0DDC38FAD651F04
                                parts:
                                  type: object
                                  properties:
                                    total:
                                      type: number
                                      example: 0
                                    hash:
                                      type: string
                                      example: EE5F3404034C524501629B56E0DDC38FAD651F04
                            signature:
                              type: string
                              example: >-
                                7uTC74QlknqYWEwg7Vn6M8Om7FuZ0EO4bjvuj6rwH1mTUJrRuMMZvAAqT9VjNgP0RA/TDp6u/92AqrZfXJSpBQ==
        '500':
          description: Server internal error
  '/blocks/{height}':
    get:
      summary: Get a block at a certain height
      tags:
        - Tendermint RPC
      produces:
        - application/json
      parameters:
        - in: path
          name: height
          description: Block height
          required: true
          type: number
          x-example: 1
      responses:
        '200':
          description: The block at a specific height
          schema:
            type: object
            properties:
              block_meta:
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      chain_id:
                        type: string
                        example: Irita
                      height:
                        type: number
                        example: 1
                      time:
                        type: string
                        example: '2017-12-30T05:53:09.287+01:00'
                      num_txs:
                        type: number
                        example: 0
                      last_block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            example: EE5F3404034C524501629B56E0DDC38FAD651F04
                          parts:
                            type: object
                            properties:
                              total:
                                type: number
                                example: 0
                              hash:
                                type: string
                                example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      total_txs:
                        type: number
                        example: 35
                      last_commit_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      data_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      validators_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      next_validators_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      consensus_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      app_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      last_results_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      evidence_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      proposer_address:
                        type: string
                        description: bech32 encoded address
                        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                      version:
                        type: object
                        properties:
                          block:
                            type: string
                            example: 10
                          app:
                            type: string
                            example: 0
                  block_id:
                    type: object
                    properties:
                      hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      parts:
                        type: object
                        properties:
                          total:
                            type: number
                            example: 0
                          hash:
                            type: string
                            example: EE5F3404034C524501629B56E0DDC38FAD651F04
              block:
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      chain_id:
                        type: string
                        example: Irita
                      height:
                        type: number
                        example: 1
                      time:
                        type: string
                        example: '2017-12-30T05:53:09.287+01:00'
                      num_txs:
                        type: number
                        example: 0
                      last_block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            example: EE5F3404034C524501629B56E0DDC38FAD651F04
                          parts:
                            type: object
                            properties:
                              total:
                                type: number
                                example: 0
                              hash:
                                type: string
                                example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      total_txs:
                        type: number
                        example: 35
                      last_commit_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      data_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      validators_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      next_validators_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      consensus_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      app_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      last_results_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      evidence_hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      proposer_address:
                        type: string
                        description: bech32 encoded address
                        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                      version:
                        type: object
                        properties:
                          block:
                            type: string
                            example: 10
                          app:
                            type: string
                            example: 0
                  txs:
                    type: array
                    items:
                      type: string
                  evidence:
                    type: array
                    items:
                      type: string
                  last_commit:
                    type: object
                    properties:
                      block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            example: EE5F3404034C524501629B56E0DDC38FAD651F04
                          parts:
                            type: object
                            properties:
                              total:
                                type: number
                                example: 0
                              hash:
                                type: string
                                example: EE5F3404034C524501629B56E0DDC38FAD651F04
                      precommits:
                        type: array
                        items:
                          type: object
                          properties:
                            validator_address:
                              type: string
                            validator_index:
                              type: string
                              example: '0'
                            height:
                              type: string
                              example: '0'
                            round:
                              type: string
                              example: '0'
                            timestamp:
                              type: string
                              example: '2017-12-30T05:53:09.287+01:00'
                            type:
                              type: number
                              example: 2
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  example: EE5F3404034C524501629B56E0DDC38FAD651F04
                                parts:
                                  type: object
                                  properties:
                                    total:
                                      type: number
                                      example: 0
                                    hash:
                                      type: string
                                      example: EE5F3404034C524501629B56E0DDC38FAD651F04
                            signature:
                              type: string
                              example: >-
                                7uTC74QlknqYWEwg7Vn6M8Om7FuZ0EO4bjvuj6rwH1mTUJrRuMMZvAAqT9VjNgP0RA/TDp6u/92AqrZfXJSpBQ==
        '400':
          description: Invalid height
        '404':
          description: Request block height doesn't
        '500':
          description: Server internal error
  /validatorsets/latest:
    get:
      summary: Get the latest validator set
      tags:
        - Tendermint RPC
      produces:
        - application/json
      responses:
        '200':
          description: The validator set at the latest block height
          schema:
            type: object
            properties:
              block_height:
                type: string
              validators:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      description: bech32 encoded address
                      example: iva1zx9jugxl5nzggdgzmut8adnc8rgwztm0dyez3r
                    pub_key:
                      type: string
                      example: >-
                        icp1ulx45dfpqr6dfashqwasg835vvuz25f7v827w0sxcl028ywktr5l0ct938h3cslc5nf
                    voting_power:
                      type: string
                      example: '1000'
                    proposer_priority:
                      type: string
                      example: '1000'
        '500':
          description: Server internal error
  '/validatorsets/{height}':
    get:
      summary: Get a validator set a certain height
      tags:
        - Tendermint RPC
      produces:
        - application/json
      parameters:
        - in: path
          name: height
          description: Block height
          required: true
          type: number
          x-example: 1
      responses:
        '200':
          description: The validator set at a specific block height
          schema:
            type: object
            properties:
              block_height:
                type: string
              validators:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      description: bech32 encoded address
                      example: iva1zx9jugxl5nzggdgzmut8adnc8rgwztm0dyez3r
                    pub_key:
                      type: string
                      example: >-
                        icp1ulx45dfpqr6dfashqwasg835vvuz25f7v827w0sxcl028ywktr5l0ct938h3cslc5nf
                    voting_power:
                      type: string
                      example: '1000'
                    proposer_priority:
                      type: string
                      example: '1000'
        '400':
          description: Invalid height
        '404':
          description: Block at height not available
        '500':
          description: Server internal error
  '/txs/{hash}':
    get:
      deprecated: true
      summary: Get a Tx by hash
      tags:
        - Transactions
      description: Retrieve a transaction using its hash.
      produces:
        - application/json
      parameters:
        - in: path
          name: hash
          description: Tx hash
          required: true
          type: string
          x-example: BCBE20E8D46758B96AE5883B792858296AC06E51435490FBDCAE25A72B3CC76B
      responses:
        '200':
          description: Tx with the provided hash
          schema:
            type: object
            properties:
              hash:
                type: string
                example: >-
                  D085138D913993919295FF4B0A9107F1F2CDE0D37A87CE0644E217CBF3B49656
              height:
                type: number
                example: 368
              tx:
                type: object
                properties:
                  msg:
                    type: array
                    items:
                      type: string
                  fee:
                    type: object
                    properties:
                      gas:
                        type: string
                      amount:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                              example: point
                            amount:
                              type: string
                              example: '50'
                  memo:
                    type: string
                  signature:
                    type: object
                    properties:
                      signature:
                        type: string
                        example: >-
                          MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
                      pub_key:
                        type: object
                        properties:
                          type:
                            type: string
                            example: tendermint/PubKeySecp256k1
                          value:
                            type: string
                            example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
                      account_number:
                        type: string
                        example: '0'
                      sequence:
                        type: string
                        example: '0'
              result:
                type: object
                properties:
                  log:
                    type: string
                  gas_wanted:
                    type: string
                    example: '200000'
                  gas_used:
                    type: string
                    example: '26354'
                  tags:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        value:
                          type: string
        '500':
          description: Internal Server Error
  /txs:
    get:
      deprecated: true
      tags:
        - Transactions
      summary: Search transactions
      description: Search transactions by events.
      produces:
        - application/json
      parameters:
        - in: query
          name: message.action
          type: string
          description: >-
            transaction events such as 'message.action=send' which results in
            the following endpoint: 'GET /txs?message.action=send'. note that
            each module documents its own events. look for xx_events.md in the
            corresponding cosmos-sdk/docs/spec directory
          x-example: send
        - in: query
          name: message.sender
          type: string
          description: >-
            transaction tags with sender: 'GET
            /txs?message.action=send&message.sender=iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf'
          x-example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
        - in: query
          name: page
          description: Page number
          type: integer
          x-example: 1
        - in: query
          name: limit
          description: Maximum number of items per page
          type: integer
          x-example: 1
        - in: query
          name: tx.minheight
          type: integer
          description: transactions on blocks with height greater or equal this value
          x-example: 25
        - in: query
          name: tx.maxheight
          type: integer
          description: transactions on blocks with height less than or equal this value
          x-example: 800000
      responses:
        '200':
          description: All txs matching the provided events
          schema:
            type: object
            properties:
              total_count:
                type: number
                example: 1
              count:
                type: number
                example: 1
              page_number:
                type: number
                example: 1
              page_total:
                type: number
                example: 1
              limit:
                type: number
                example: 30
              txs:
                type: array
                items:
                  type: object
                  properties:
                    hash:
                      type: string
                      example: >-
                        D085138D913993919295FF4B0A9107F1F2CDE0D37A87CE0644E217CBF3B49656
                    height:
                      type: number
                      example: 368
                    tx:
                      type: object
                      properties:
                        msg:
                          type: array
                          items:
                            type: string
                        fee:
                          type: object
                          properties:
                            gas:
                              type: string
                            amount:
                              type: array
                              items:
                                type: object
                                properties:
                                  denom:
                                    type: string
                                    example: point
                                  amount:
                                    type: string
                                    example: '50'
                        memo:
                          type: string
                        signature:
                          type: object
                          properties:
                            signature:
                              type: string
                              example: >-
                                MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
                            pub_key:
                              type: object
                              properties:
                                type:
                                  type: string
                                  example: tendermint/PubKeySecp256k1
                                value:
                                  type: string
                                  example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
                            account_number:
                              type: string
                              example: '0'
                            sequence:
                              type: string
                              example: '0'
                    result:
                      type: object
                      properties:
                        log:
                          type: string
                        gas_wanted:
                          type: string
                          example: '200000'
                        gas_used:
                          type: string
                          example: '26354'
                        tags:
                          type: array
                          items:
                            type: object
                            properties:
                              key:
                                type: string
                              value:
                                type: string
        '400':
          description: Invalid search events
        '500':
          description: Internal Server Error
    post:
      tags:
        - Transactions
      summary: Broadcast a signed tx
      description: Broadcast a signed tx to a full node
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: txBroadcast
          description: >-
            The tx must be a signed StdTx. The supported broadcast modes include
            `"block"`(return after tx commit), `"sync"`(return afer CheckTx) and
            `"async"`(return right away).
          required: true
          schema:
            type: object
            properties:
              tx:
                type: object
                properties:
                  msg:
                    type: array
                    items:
                      type: string
                  fee:
                    type: object
                    properties:
                      gas:
                        type: string
                      amount:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                              example: point
                            amount:
                              type: string
                              example: '50'
                  memo:
                    type: string
                  signature:
                    type: object
                    properties:
                      signature:
                        type: string
                        example: >-
                          MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
                      pub_key:
                        type: object
                        properties:
                          type:
                            type: string
                            example: tendermint/PubKeySecp256k1
                          value:
                            type: string
                            example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
                      account_number:
                        type: string
                        example: '0'
                      sequence:
                        type: string
                        example: '0'
              mode:
                type: string
                example: block
      responses:
        '200':
          description: Tx broadcasting result
          schema:
            type: object
            properties:
              check_tx:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    type: string
                  gas_used:
                    type: integer
                  gas_wanted:
                    type: integer
                  info:
                    type: string
                  log:
                    type: string
                  tags:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                example:
                  code: 0
                  data: data
                  log: log
                  gas_used: 5000
                  gas_wanted: 10000
                  info: info
                  tags:
                    - ''
                    - ''
              deliver_tx:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    type: string
                  gas_used:
                    type: integer
                  gas_wanted:
                    type: integer
                  info:
                    type: string
                  log:
                    type: string
                  tags:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                example:
                  code: 5
                  data: data
                  log: log
                  gas_used: 5000
                  gas_wanted: 10000
                  info: info
                  tags:
                    - ''
                    - ''
              hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              height:
                type: integer
        '500':
          description: Internal Server Error
  /txs/encode:
    post:
      deprecated: true
      tags:
        - Transactions
      summary: Encode a transaction to the Amino wire format
      description: >-
        Encode a transaction (signed or not) from JSON to base64-encoded Amino
        serialized bytes
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: tx
          description: The tx to encode
          required: true
          schema:
            type: object
            properties:
              tx:
                type: object
                properties:
                  msg:
                    type: array
                    items:
                      type: string
                  fee:
                    type: object
                    properties:
                      gas:
                        type: string
                      amount:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                              example: point
                            amount:
                              type: string
                              example: '50'
                  memo:
                    type: string
                  signature:
                    type: object
                    properties:
                      signature:
                        type: string
                        example: >-
                          MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
                      pub_key:
                        type: object
                        properties:
                          type:
                            type: string
                            example: tendermint/PubKeySecp256k1
                          value:
                            type: string
                            example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
                      account_number:
                        type: string
                        example: '0'
                      sequence:
                        type: string
                        example: '0'
      responses:
        '200':
          description: The tx was successfully decoded and re-encoded
          schema:
            type: object
            properties:
              tx:
                type: string
                example: The base64-encoded Amino-serialized bytes for the tx
        '400':
          description: The tx was malformated
        '500':
          description: Server internal error
  /txs/decode:
    post:
      deprecated: true
      tags:
        - Transactions
      summary: Decode a transaction from the Amino wire format
      description: >-
        Decode a transaction (signed or not) from base64-encoded Amino
        serialized bytes to JSON
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: tx
          description: The tx to decode
          required: true
          schema:
            type: object
            properties:
              tx:
                type: string
                example: >-
                  SvBiXe4KPqijYZoKFFHEzJ8c2HPAfv2EFUcIhx0yPagwEhTy0vPA+GGhCEslKXa4Af0uB+mfShoMCgVzdGFrZRIDMTAwEgQQwJoM
      responses:
        '200':
          description: The tx was successfully decoded
          schema:
            type: object
            properties:
              msg:
                type: array
                items:
                  type: string
              fee:
                type: object
                properties:
                  gas:
                    type: string
                  amount:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
              memo:
                type: string
              signature:
                type: object
                properties:
                  signature:
                    type: string
                    example: >-
                      MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
                  pub_key:
                    type: object
                    properties:
                      type:
                        type: string
                        example: tendermint/PubKeySecp256k1
                      value:
                        type: string
                        example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '0'
        '400':
          description: The tx was malformated
        '500':
          description: Server internal error
  '/bank/balances/{address}':
    get:
      deprecated: true
      summary: Get the account balances
      tags:
        - Bank
      produces:
        - application/json
      parameters:
        - in: path
          name: address
          description: Account address in bech32 format
          required: true
          type: string
          x-example: 1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      responses:
        '200':
          description: Account balances
          schema:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                  example: point
                amount:
                  type: string
                  example: '50'
        '500':
          description: Server internal error
  '/bank/accounts/{address}/transfers':
    post:
      deprecated: true
      summary: Send coins from one account to another
      tags:
        - Bank
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: address
          description: Account address in bech32 format
          required: true
          type: string
          x-example: 1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
        - in: body
          name: account
          description: The sender and tx information
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              amount:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                      example: point
                    amount:
                      type: string
                      example: '50'
      responses:
        '202':
          description: Tx was succesfully generated
          schema:
            type: object
            properties:
              msg:
                type: array
                items:
                  type: string
              fee:
                type: object
                properties:
                  gas:
                    type: string
                  amount:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
              memo:
                type: string
              signature:
                type: object
                properties:
                  signature:
                    type: string
                    example: >-
                      MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
                  pub_key:
                    type: object
                    properties:
                      type:
                        type: string
                        example: tendermint/PubKeySecp256k1
                      value:
                        type: string
                        example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '0'
        '400':
          description: Invalid request
        '500':
          description: Server internal error
  '/auth/accounts/{address}':
    get:
      deprecated: true
      summary: Get the account information on blockchain
      tags:
        - Auth
      produces:
        - application/json
      parameters:
        - in: path
          name: address
          description: Account address
          required: true
          type: string
          x-example: 1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      responses:
        '200':
          description: Account information on the blockchain
          schema:
            type: object
            properties:
              type:
                type: string
              value:
                type: object
                properties:
                  account_number:
                    type: string
                  address:
                    type: string
                  coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  public_key:
                    type: object
                    properties:
                      type:
                        type: string
                      value:
                        type: string
                  sequence:
                    type: string
        '500':
          description: Server internel error
  '/validator/validators/{name}':
    get:
      deprecated: true
      summary: Get a validator information by name
      tags:
        - Validator
      produces:
        - application/json
      parameters:
        - in: path
          name: name
          description: Validator name
          required: true
          type: string
          x-example: v1
      responses:
        '200':
          description: validator information on the blockchain
          schema:
            type: object
            properties:
              name:
                type: string
              moniker:
                type: string
              pubkey:
                type: string
              power:
                type: integer
              details:
                type: string
              jailed:
                type: boolean
              Operator:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
        '400':
          description: Invalid request
        '500':
          description: Server internal error
  /validator/validators:
    get:
      deprecated: true
      summary: Get validator list
      tags:
        - Validator
      produces:
        - application/json
      parameters:
        - in: query
          name: jailed
          description: Query by validator status
          type: boolean
          x-example: true
        - in: query
          name: page
          description: Page number
          type: integer
          x-example: 1
        - in: query
          name: limit
          description: Maximum number of items per page
          type: integer
          x-example: 1
      responses:
        '200':
          description: validator information on the blockchain
          schema:
            type: array
            properties:
              name:
                type: string
              moniker:
                type: string
              pubkey:
                type: string
              power:
                type: integer
              details:
                type: string
              jailed:
                type: boolean
              Operator:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
        '400':
          description: Invalid request
        '500':
          description: Server internal error
  /validator/parameters:
    get:
      deprecated: true
      summary: Get the parameters information in validator module
      tags:
        - Validator
      produces:
        - application/json
      responses:
        '200':
          description: parameters information in validator module
          schema:
            properties:
              historical_entries:
                type: integer
                example: 100
        '400':
          description: Invalid request
        '500':
          description: Server internal error
  /supply/total:
    get:
      deprecated: true
      summary: Total supply of coins in the chain
      tags:
        - Supply
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              total:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                      example: point
                    amount:
                      type: string
                      example: '50'
        '500':
          description: Internal Server Error
  '/supply/total/{denomination}':
    parameters:
      - in: path
        name: denomination
        description: Coin denomination
        required: true
        type: string
        x-example: uatom
    get:
      deprecated: true
      summary: Total supply of a single coin denomination
      tags:
        - Supply
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: string
        '400':
          description: Invalid coin denomination
        '500':
          description: Internal Server Error
  /token:
    post:
      deprecated: true
      summary: Issue a token
      tags:
        - Token
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: token
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              owner:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
              name:
                type: string
                example: Hello Kitty
              symbol:
                type: string
                example: cat
              min_unit:
                type: string
                example: min
              initial_supply:
                type: string
                example: '1000000000'
              max_supply:
                type: string
                example: '2000000000'
              scale:
                type: integer
                example: 18
              mintable:
                type: boolean
                example: true
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
    get:
      deprecated: true
      summary: Query tokens by owner
      tags:
        - Token
      parameters:
        - in: query
          name: owner
          description: the owner address
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  symbol:
                    type: string
                  name:
                    type: string
                  min_unit:
                    type: string
                  scale:
                    type: integer
                  initial_supply:
                    type: string
                  max_supply:
                    type: string
                  mintable:
                    type: boolean
                  owner:
                    type: string
                    description: bech32 encoded address
                    example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/token/tokens/{symbol}':
    get:
      deprecated: true
      summary: Query a token by symbol
      tags:
        - Token
      parameters:
        - in: path
          name: symbol
          description: symbol of the token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  symbol:
                    type: string
                  name:
                    type: string
                  min_unit:
                    type: string
                  scale:
                    type: integer
                  initial_supply:
                    type: string
                  max_supply:
                    type: string
                  mintable:
                    type: boolean
                  owner:
                    type: string
                    description: bech32 encoded address
                    example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
        '400':
          description: Invalid symbol
        '500':
          description: Internal Server Error
    put:
      deprecated: true
      summary: Edit an existing token
      parameters:
        - in: path
          name: symbol
          description: symbol of the token
          required: true
          schema:
            type: string
        - in: body
          name: token
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              owner:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
              max_supply:
                type: string
                example: '21000000'
              mintable:
                type: string
                example: ''
              name:
                type: string
                example: BTC Token
      tags:
        - Token
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/token/tokens/{symbol}/mint':
    post:
      deprecated: true
      summary: Mint tokens to a specified address
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: symbol
          description: symbol of the token
          required: true
          schema:
            type: string
        - in: body
          name: token
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              owner:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
              to:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
              amount:
                type: string
                example: '21000000'
      tags:
        - Token
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/token/tokens/{symbol}/transfer':
    post:
      deprecated: true
      summary: Transfer the ownership of the token to a new owner
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: symbol
          description: symbol of the token
          required: true
          schema:
            type: string
        - in: body
          name: transfer
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              src_owner:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
              dst_owner:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      tags:
        - Token
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/token/tokens/{symbol}/fee':
    get:
      deprecated: true
      summary: Query the fees for issuing and minting the token with the given symbol
      tags:
        - Token
      parameters:
        - in: path
          name: symbol
          description: the token symbol
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  exist:
                    type: boolean
                  issue_fee:
                    type: object
                    properties:
                      denom:
                        type: string
                        example: point
                      amount:
                        type: string
                        example: '50'
                  mint_fee:
                    type: object
                    properties:
                      denom:
                        type: string
                        example: point
                      amount:
                        type: string
                        example: '50'
        '400':
          description: Invalid symbol
        '500':
          description: Internal Server Error
  /nft/nfts/mint:
    post:
      deprecated: true
      summary: Mint an NFT to a specified address
      tags:
        - NFT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: MintNFTReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              owner:
                example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                type: string
                description: bech32 encoded address
              recipient:
                example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                type: string
                description: bech32 encoded address
              token_id:
                type: string
              token_uri:
                type: string
              denom:
                type: string
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/nft/nfts/{denom}/{token-id}':
    get:
      deprecated: true
      summary: Query an NFT by the denom and ID
      tags:
        - NFT
      parameters:
        - in: path
          name: denom
          description: denom of the NFT
          required: true
          schema:
            type: string
        - in: path
          name: token-id
          description: ID of the NFT
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  owner:
                    type: string
                    description: bech32 encoded address
                    example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                  token_uri:
                    type: string
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
    put:
      deprecated: true
      summary: Edit an NFT of the specified denom and ID
      tags:
        - NFT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: denom
          description: denom of the NFT
          required: true
          schema:
            type: string
        - in: path
          name: token-id
          description: ID of the NFT
          required: true
          schema:
            type: string
        - in: body
          name: EditNFTReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              owner:
                example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                type: string
                description: bech32 encoded address
              token_uri:
                type: string
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/nft/nfts/{denom}/{token-id}/transfer':
    post:
      deprecated: true
      summary: Transfer the ownership of an NFT of the specified denom and ID
      tags:
        - NFT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: denom
          description: denom of the NFT
          required: true
          schema:
            type: string
        - in: path
          name: token-id
          description: ID of the NFT
          required: true
          schema:
            type: string
        - in: body
          name: TransferNFTReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              owner:
                example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                type: string
                description: bech32 encoded address
              recipient:
                example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                type: string
                description: bech32 encoded address
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/nft/nfts/{denom}/{token-id}/burn':
    post:
      deprecated: true
      summary: Burn an NFT of the specified denom and ID
      tags:
        - NFT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: denom
          description: denom of the NFT
          required: true
          schema:
            type: string
        - in: path
          name: token-id
          description: ID of the NFT
          required: true
          schema:
            type: string
        - in: body
          name: BurnNFTReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              owner:
                example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                type: string
                description: bech32 encoded address
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/nft/nfts/collections/{denom}':
    get:
      deprecated: true
      summary: Query the NFT collection of the specified denom
      tags:
        - NFT
      parameters:
        - in: path
          name: denom
          description: denom of the collection
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/nft/nfts/owners/{address}':
    get:
      deprecated: true
      summary: Query the collections of NFTs owned by an address
      tags:
        - NFT
      parameters:
        - in: path
          name: address
          description: owner address
          required: true
          schema:
            type: string
        - in: query
          name: denom
          description: optional denom
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      description: bech32 encoded address
                      example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                    id_collections:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          IDs:
                            type: array
                            items:
                              type: string
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  /nft/nfts/denoms:
    get:
      deprecated: true
      summary: Query all existing denoms
      tags:
        - NFT
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/nft/nfts/supplies/{denom}':
    get:
      deprecated: true
      summary: Query the supply of NFTs of the specified denom
      tags:
        - NFT
      parameters:
        - in: path
          name: denom
          description: denom of NFTs
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  /record/records:
    post:
      deprecated: true
      summary: Create a record
      tags:
        - Record
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: record
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              contents:
                type: array
                items:
                  type: object
                  properties:
                    digest:
                      type: string
                    digest_algo:
                      type: string
                      example: SHA256
                    uri:
                      type: string
                    meta:
                      type: string
              creator:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/record/records/{record-id}':
    get:
      deprecated: true
      summary: Query a record by id
      tags:
        - Record
      parameters:
        - in: path
          name: record-id
          description: id of the record
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tx_hash:
                    type: string
                  contents:
                    type: array
                    items:
                      type: object
                      properties:
                        digest:
                          type: string
                        digest_algo:
                          type: string
                          example: SHA256
                        uri:
                          type: string
                        meta:
                          type: string
                  creator:
                    type: string
                    description: bech32 encoded address
                    example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
        '400':
          description: Invalid symbol
        '500':
          description: Internal Server Error
  /service/definitions:
    post:
      deprecated: true
      summary: Define a service
      description: Define a service with JSON schemas
      tags:
        - Service
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: DefineServiceReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              name:
                type: string
              description:
                type: string
              tags:
                type: array
                items:
                  type: string
              author:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
              author_description:
                type: string
              schemas:
                type: string
                example: '{"input":{"type":"object"},"output":{"type":"object"}}'
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/definitions/{service-name}':
    get:
      deprecated: true
      summary: Query a service definition
      tags:
        - Service
      parameters:
        - in: path
          name: service-name
          description: service name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  description:
                    type: string
                  tags:
                    type: array
                    items:
                      type: string
                  author:
                    type: string
                    description: bech32 encoded address
                    example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                  author_description:
                    type: string
                  schemas:
                    type: string
                    example: >-
                      {"input":{"type":"object"},"output":{"type":"object"},"error":{"type":"object"}}
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  /service/bindings:
    post:
      deprecated: true
      summary: Bind a service
      description: Bind a service
      tags:
        - Service
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: BindServiceReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              service_name:
                type: string
              provider:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
              deposit:
                type: string
                example: 10000iris
              pricing:
                type: string
                example: '{"price":"1iris"}'
              min_resp_time:
                type: integer
                example: '50'
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/bindings/{service-name}/{provider}':
    get:
      deprecated: true
      summary: Query a service binding
      tags:
        - Service
      parameters:
        - in: path
          name: service-name
          description: service name
          required: true
          schema:
            type: string
        - in: path
          name: provider
          description: provider address
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  service_name:
                    type: string
                  provider:
                    type: string
                    description: bech32 encoded address
                    example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                  deposit:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  pricing:
                    type: string
                    example: '{"price":"1iris"}'
                  min_resp_time:
                    type: integer
                  available:
                    type: boolean
                  disabled_time:
                    type: string
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
    put:
      deprecated: true
      summary: Update a service binding
      description: Update a service binding
      tags:
        - Service
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: service-name
          description: service name
          required: true
          schema:
            type: string
        - in: path
          name: provider
          description: provider address
          required: true
          schema:
            type: string
        - in: body
          name: UpdateServiceBindingReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              deposit:
                type: string
                example: 1iris
              pricing:
                type: string
                example: '{"price":"1iris"}'
              min_resp_time:
                type: integer
                example: '50'
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/bindings/{service-name}':
    get:
      deprecated: true
      summary: Query all bindings of a service definition
      tags:
        - Service
      parameters:
        - in: path
          name: service-name
          description: service name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    service_name:
                      type: string
                    provider:
                      type: string
                      description: bech32 encoded address
                      example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                    deposit:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                            example: point
                          amount:
                            type: string
                            example: '50'
                    pricing:
                      type: string
                      example: '{"price":"1iris"}'
                    min_resp_time:
                      type: integer
                    available:
                      type: boolean
                    disabled_time:
                      type: string
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/providers/{provider}/withdraw-address':
    get:
      deprecated: true
      summary: Query the withdrawal address of a provider
      tags:
        - Service
      parameters:
        - in: path
          name: provider
          description: provider address
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
            description: bech32 encoded address
            example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
    post:
      deprecated: true
      summary: Set a withdrawal address for a provider
      tags:
        - Service
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: provider
          description: provider adress
          required: true
          schema:
            type: string
        - in: body
          name: SetWithdrawAddrReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              withdraw_address:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/bindings/{service-name}/{provider}/disable':
    post:
      deprecated: true
      summary: Disable an available service binding
      description: Disable an available service binding by the service name and provider
      tags:
        - Service
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: service-name
          description: service name
          required: true
          schema:
            type: string
        - in: path
          name: provider
          description: provider address
          required: true
          schema:
            type: string
        - in: body
          name: DisableServiceBindingReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/bindings/{service-name}/{provider}/enable':
    post:
      deprecated: true
      summary: Enable an unavailable service binding
      description: Enable an unavailable service binding by the service name and provider
      tags:
        - Service
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: service-name
          description: service name
          required: true
          schema:
            type: string
        - in: path
          name: provider
          description: provider address
          required: true
          schema:
            type: string
        - in: body
          name: EnableServiceBindingReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              deposit:
                type: string
                example: 1iris
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/bindings/{service-name}/{provider}/refund-deposit':
    post:
      deprecated: true
      summary: Refund all deposit from a service binding
      description: Refund all deposit from a service binding
      tags:
        - Service
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: service-name
          description: service name
          required: true
          schema:
            type: string
        - in: path
          name: provider
          description: provider address
          required: true
          schema:
            type: string
        - in: body
          name: RefundServiceDepositReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  /service/contexts:
    post:
      deprecated: true
      summary: Initiate a service call
      description: Initiate a service call with the specified params
      tags:
        - Service
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: CallServiceReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              service_name:
                type: string
              providers:
                type: array
                items:
                  type: string
                  description: bech32 encoded address
                  example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
              consumer:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
              input:
                type: string
                example: '{"id":1}'
              service_fee_cap:
                type: string
                example: 1iris
              timeout:
                type: integer
                example: '20'
              super_mode:
                type: boolean
                example: false
              repeated:
                type: boolean
                example: true
              repeated_frequency:
                type: integer
                example: '50'
              repeated_total:
                type: integer
                example: '100'
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/contexts/{request-context-id}':
    get:
      deprecated: true
      summary: Query a request context
      tags:
        - Service
      parameters:
        - in: path
          name: request-context-id
          description: request context ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  service_name:
                    type: string
                  providers:
                    type: array
                    items:
                      type: string
                      description: bech32 encoded address
                      example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                  consumer:
                    type: string
                    description: bech32 encoded address
                    example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                  input:
                    type: string
                    example: '{"id":1}'
                  service_fee_cap:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  timeout:
                    type: integer
                  super_mode:
                    type: boolean
                  repeated:
                    type: boolean
                  repeated_frequency:
                    type: integer
                  repeated_total:
                    type: integer
                  batch_counter:
                    type: integer
                  batch_request_count:
                    type: integer
                  batch_response_count:
                    type: integer
                  batch_response_threshold:
                    type: integer
                  batch_state:
                    type: string
                  state:
                    type: string
                  response_threshold:
                    type: integer
                  module_name:
                    type: string
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
    put:
      deprecated: true
      summary: Update a request context
      description: Update a request context
      tags:
        - Service
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: request-context-id
          description: request context ID
          required: true
          schema:
            type: string
        - in: body
          name: UpdateRequestContextReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              providers:
                type: array
                items:
                  type: string
                  description: bech32 encoded address
                  example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
              service_fee_cap:
                type: string
                example: 1iris
              timeout:
                type: integer
                example: '0'
              repeated_frequency:
                type: integer
                example: '0'
              repeated_total:
                type: integer
                example: '0'
              consumer:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/contexts/{request-context-id}/pause':
    post:
      deprecated: true
      summary: Pause a running request context
      description: Pause a running request context
      tags:
        - Service
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: request-context-id
          description: request context ID
          required: true
          schema:
            type: string
        - in: body
          name: PauseRequestContextReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              consumer:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/contexts/{request-context-id}/start':
    post:
      deprecated: true
      summary: Start a paused request context
      description: Start a paused request context
      tags:
        - Service
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: request-context-id
          description: request context ID
          required: true
          schema:
            type: string
        - in: body
          name: StartRequestContextReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              consumer:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/contexts/{request-context-id}/kill':
    post:
      deprecated: true
      summary: Terminate a request context
      description: Terminate a request context
      tags:
        - Service
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: request-context-id
          description: request context ID
          required: true
          schema:
            type: string
        - in: body
          name: KillRequestContextReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              consumer:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/requests/{request-id}':
    get:
      deprecated: true
      summary: Query a request by the request ID
      tags:
        - Service
      parameters:
        - in: path
          name: request-id
          description: request ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  service_name:
                    type: string
                  provider:
                    type: string
                    description: bech32 encoded address
                    example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                  consumer:
                    type: string
                    description: bech32 encoded address
                    example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                  input:
                    type: string
                    example: '{"id":1}'
                  service_fee:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  super_mode:
                    type: boolean
                  request_height:
                    type: integer
                  expiration_height:
                    type: integer
                  request_context_id:
                    type: string
                  request_context_batch_counter:
                    type: integer
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/requests/{service-name}/{provider}':
    get:
      deprecated: true
      summary: Query active requests of a service binding
      tags:
        - Service
      parameters:
        - in: path
          name: service-name
          description: service name
          required: true
          schema:
            type: string
        - in: path
          name: provider
          description: provider address
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    service_name:
                      type: string
                    provider:
                      type: string
                      description: bech32 encoded address
                      example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                    consumer:
                      type: string
                      description: bech32 encoded address
                      example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                    input:
                      type: string
                      example: '{"id":1}'
                    service_fee:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                            example: point
                          amount:
                            type: string
                            example: '50'
                    super_mode:
                      type: boolean
                    request_height:
                      type: integer
                    expiration_height:
                      type: integer
                    request_context_id:
                      type: string
                    request_context_batch_counter:
                      type: integer
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  /service/responses:
    post:
      deprecated: true
      summary: Respond to a service request
      description: Respond to a service request by the request ID
      tags:
        - Service
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: RespondServiceReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              request_id:
                type: string
              provider:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
              result:
                type: string
                example: '{"code":200,"message":""}'
              output:
                type: string
                example: '{"name":"irisnet"}'
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/responses/{request-id}':
    get:
      deprecated: true
      summary: Query a response by the request ID
      tags:
        - Service
      parameters:
        - in: path
          name: request-id
          description: request ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  provider:
                    type: string
                    description: bech32 encoded address
                    example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                  consumer:
                    type: string
                    description: bech32 encoded address
                    example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                  result:
                    type: string
                    example: '{"code":200,"message":""}'
                  output:
                    type: string
                    example: '{"name":"irisnet"}'
                  request_context_id:
                    type: string
                  request_context_batch_counter:
                    type: integer
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/requests/{request-context-id}/{batch-counter}':
    get:
      deprecated: true
      summary: Query active requests by the request context ID and batch counter
      tags:
        - Service
      parameters:
        - in: path
          name: request-context-id
          description: request context ID
          required: true
          schema:
            type: string
        - in: path
          name: batch-counter
          description: batch counter
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    service_name:
                      type: string
                    provider:
                      type: string
                      description: bech32 encoded address
                      example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                    consumer:
                      type: string
                      description: bech32 encoded address
                      example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                    input:
                      type: string
                      example: '{"id":1}'
                    service_fee:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                            example: point
                          amount:
                            type: string
                            example: '50'
                    super_mode:
                      type: boolean
                    request_height:
                      type: integer
                    expiration_height:
                      type: integer
                    request_context_id:
                      type: string
                    request_context_batch_counter:
                      type: integer
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/responses/{request-context-id}/{batch-counter}':
    get:
      deprecated: true
      summary: Query active responses by the request context ID and batch counter
      tags:
        - Service
      parameters:
        - in: path
          name: request-context-id
          description: request context ID
          required: true
          schema:
            type: string
        - in: path
          name: batch-counter
          description: batch counter
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    provider:
                      type: string
                      description: bech32 encoded address
                      example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                    consumer:
                      type: string
                      description: bech32 encoded address
                      example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                    result:
                      type: string
                      example: '{"code":200,"message":""}'
                    output:
                      type: string
                      example: '{"name":"irisnet"}'
                    request_context_id:
                      type: string
                    request_context_batch_counter:
                      type: integer
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/fees/{provider}/withdraw':
    post:
      deprecated: true
      summary: Withdraw the earned fees of a provider
      description: Withdraw the earned fees of a provider
      tags:
        - Service
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: provider
          description: provider address
          required: true
          schema:
            type: string
        - in: body
          name: WithdrawEarnedFeesReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/fees/{provider}':
    get:
      deprecated: true
      summary: Query the earned fees of a provider
      tags:
        - Service
      parameters:
        - in: path
          name: provider
          description: provider
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    type: string
                    description: bech32 encoded address
                    example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
                  coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/service/schemas/{schema-name}':
    get:
      deprecated: true
      summary: Query the system schema by the schema name
      tags:
        - Service
      parameters:
        - in: path
          name: schema-name
          description: 'schema name, only pricing and result allowed'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  /identity/identities:
    post:
      deprecated: true
      summary: Create an identity
      tags:
        - Identity
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: CreateIdentityReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              id:
                type: string
                example: 2c4355bcceef470b823ca0fe24a2d900
              pubkey:
                type: string
                example: >-
                  02fdf3dde4468dad14138acc85e0152ee1ee08750627df5dd5c17a1013fe5d59ea
              pubkey_algo:
                type: string
                example: ECDSA
              certificate:
                type: string
              credentials:
                type: string
                example: 'https://kyc.com/user/10001'
              owner:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/identity/identities/{id}':
    get:
      deprecated: true
      summary: Query an identity
      tags:
        - Identity
      parameters:
        - in: path
          name: id
          description: ID of the identity
          required: true
          schema:
            type: string
            example: 2c4355bcceef470b823ca0fe24a2d900
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 2c4355bcceef470b823ca0fe24a2d900
                  pubkeys:
                    type: array
                    items:
                      type: object
                      properties:
                        pubkey:
                          type: string
                          example: >-
                            02fdf3dde4468dad14138acc85e0152ee1ee08750627df5dd5c17a1013fe5d59ea
                        algorithm:
                          type: string
                          example: ECDSA
                  certificates:
                    type: array
                    items:
                      type: string
                  credentials:
                    type: string
                    example: 'https://kyc.com/user/10001'
                  owner:
                    type: string
                    description: bech32 encoded address
                    example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
        '400':
          description: Invalid ID
        '500':
          description: Internal Server Error
    put:
      deprecated: true
      summary: Update an identity
      tags:
        - Identity
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of the identity
          required: true
          schema:
            type: string
            example: 2c4355bcceef470b823ca0fe24a2d900
        - in: body
          name: UpdateIdentityReq
          required: true
          schema:
            type: object
            properties:
              base_req:
                type: object
                properties:
                  from:
                    type: string
                    example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
                    description: Sender address or Keybase name to generate a transaction
                  memo:
                    type: string
                    example: Sent via Irita
                  chain_id:
                    type: string
                    example: Irita
                  account_number:
                    type: string
                    example: '0'
                  sequence:
                    type: string
                    example: '1'
                  gas:
                    type: string
                    example: '200000'
                  gas_adjustment:
                    type: string
                    example: '1.2'
                  fees:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          example: point
                        amount:
                          type: string
                          example: '50'
                  simulate:
                    type: boolean
                    example: false
                    description: >-
                      Estimate gas for a transaction (cannot be used in
                      conjunction with generate_only)
              pubkey:
                type: string
                example: >-
                  02fdf3dde4468dad14138acc85e0152ee1ee08750627df5dd5c17a1013fe5d59ea
              pubkey_algo:
                type: string
                example: ECDSA
              certificate:
                type: string
              credentials:
                type: string
                example: 'https://kyc.com/user/10001'
              owner:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      responses:
        '200':
          description: Unsigned tx was succesfully generated
        '400':
          description: Invalid parameters
        '500':
          description: Internal Server Error
  '/cosmos/auth/v1beta1/accounts/{address}':
    get:
      summary: Account returns account details based on address.
      operationId: Account
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              account:
                description: account defines the account of the corresponding address.
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
            description: >-
              QueryAccountResponse is the response type for the Query/Account
              RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address defines the address to query for.
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  /cosmos/auth/v1beta1/params:
    get:
      summary: Params queries all parameters.
      operationId: AuthParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  max_memo_characters:
                    type: string
                    format: uint64
                  tx_sig_limit:
                    type: string
                    format: uint64
                  tx_size_cost_per_byte:
                    type: string
                    format: uint64
                  sig_verify_cost_ed25519:
                    type: string
                    format: uint64
                  sig_verify_cost_secp256k1:
                    type: string
                    format: uint64
                  sig_verify_cost_sm2:
                    type: string
                    format: uint64
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  '/cosmos/bank/v1beta1/balances/{address}':
    get:
      summary: AllBalances queries the balance of all coins for a single account.
      operationId: AllBalances
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              balances:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                description: balances is the balances of all the coins.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAllBalancesResponse is the response type for the
              Query/AllBalances RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: address
          description: address is the address to query balances for.
          in: path
          required: true
          type: string
          format: byte
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs. count_total

            is only respected when offset is used. It is ignored when key is
            set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/bank/v1beta1/balances/{address}/{denom}':
    get:
      summary: Balance queries the balance of a single coin for a single account.
      operationId: Balance
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              balance:
                description: balance is the balance of the coin.
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
            description: >-
              QueryBalanceResponse is the response type for the Query/Balance
              RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: address
          description: address is the address to query balances for.
          in: path
          required: true
          type: string
          format: byte
        - name: denom
          description: denom is the coin denom to query balances for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/bank/v1beta1/params:
    get:
      summary: Params queries the parameters of x/bank module.
      operationId: BankParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  send_enabled:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        enabled:
                          type: boolean
                      description: >-
                        SendEnabled maps coin denom to a send_enabled status
                        (whether a denom is sendable).
                  default_send_enabled:
                    type: boolean
                description: Params defines the parameters for the bank module.
            description: >-
              QueryParamsResponse defines the response type for querying x/bank
              parameters.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /cosmos/bank/v1beta1/supply:
    get:
      summary: TotalSupply queries the total supply of all coins.
      operationId: TotalSupply
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              supply:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: supply is the supply of the coins
            title: >-
              QueryTotalSupplyResponse is the response type for the
              Query/TotalSupply RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  '/cosmos/bank/v1beta1/supply/{denom}':
    get:
      summary: SupplyOf queries the supply of a single coin.
      operationId: SupplyOf
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              amount:
                description: amount is the supply of the coin.
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
            description: >-
              QuerySupplyOfResponse is the response type for the Query/SupplyOf
              RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          description: denom is the coin denom to query balances for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/evidence/v1beta1/evidence:
    get:
      summary: AllEvidence queries all evidence.
      operationId: AllEvidence
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              evidence:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                description: evidence returns all evidences.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAllEvidenceResponse is the response type for the
              Query/AllEvidence RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs. count_total

            is only respected when offset is used. It is ignored when key is
            set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/cosmos/evidence/v1beta1/evidence/{evidence_hash}':
    get:
      summary: Evidence queries evidence based on evidence hash.
      operationId: Evidence
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              evidence:
                description: evidence returns the requested evidence.
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
            description: >-
              QueryEvidenceResponse is the response type for the Query/Evidence
              RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: evidence_hash
          description: evidence_hash defines the hash of the requested evidence.
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  '/cosmos/upgrade/v1beta1/applied_plan/{name}':
    get:
      summary: AppliedPlan queries a previously applied upgrade plan by its name.
      operationId: AppliedPlan
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              height:
                type: string
                format: int64
                description: height is the block height at which the plan was applied.
            description: >-
              QueryAppliedPlanResponse is the response type for the
              Query/AppliedPlan RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: name
          description: name is the name of the applied plan to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/upgrade/v1beta1/current_plan:
    get:
      summary: CurrentPlan queries the current upgrade plan.
      operationId: CurrentPlan
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              plan:
                description: plan is the current upgrade plan.
                type: object
                properties:
                  name:
                    type: string
                    description: >-
                      Sets the name for the upgrade. This name will be used by
                      the upgraded version of the software to apply any

                      special "on-upgrade" commands during the first BeginBlock
                      method after the upgrade is applied. It is also used

                      to detect whether a software version can handle a given
                      upgrade. If no upgrade handler with this name has been

                      set in the software, it will be assumed that the software
                      is out-of-date when the upgrade Time or Height

                      is reached and the software will exit.
                  time:
                    type: string
                    format: date-time
                    description: >-
                      The time after which the upgrade must be performed.

                      Leave set to its zero value to use a pre-defined Height
                      instead.
                  height:
                    type: string
                    format: int64
                    description: |-
                      The height at which the upgrade must be performed.
                      Only used if Time is not set.
                  info:
                    type: string
                    title: >-
                      Any application specific upgrade info to be included
                      on-chain

                      such as a git commit that validators could automatically
                      upgrade to
            description: >-
              QueryCurrentPlanResponse is the response type for the
              Query/CurrentPlan RPC method.
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  '/irismod/nft/collections/{denom}':
    get:
      summary: Collection queries the NFTs of the specified denom
      operationId: Collection
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              collection:
                type: object
                properties:
                  denom:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      schema:
                        type: string
                      creator:
                        type: string
                        format: byte
                    description: Denom defines a type of NFT.
                  nfts:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        uri:
                          type: string
                        data:
                          type: string
                        owner:
                          type: string
                          format: byte
                      description: BaseNFT defines a non fungible token.
            title: >-
              QueryCollectionResponse is the response type for the
              Query/Collection RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          in: path
          required: true
          type: string
      tags:
        - Query
  /irismod/nft/denoms:
    get:
      summary: Denoms queries all the denoms
      operationId: Denoms
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              denoms:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    schema:
                      type: string
                    creator:
                      type: string
                      format: byte
                  description: Denom defines a type of NFT.
            title: >-
              QueryDenomsResponse is the response type for the Query/Denoms RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  '/irismod/nft/denoms/{denom}':
    get:
      summary: Denom queries the definition of a given denom
      operationId: Denom
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              denom:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  schema:
                    type: string
                  creator:
                    type: string
                    format: byte
                description: Denom defines a type of NFT.
            title: >-
              QueryDenomResponse is the response type for the Query/Denom RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          in: path
          required: true
          type: string
      tags:
        - Query
  '/irismod/nft/nfts/{denom}/{id}':
    get:
      summary: NFT queries the NFT for the given denom and token ID
      operationId: NFT
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              nft:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  uri:
                    type: string
                  data:
                    type: string
                  owner:
                    type: string
                    format: byte
                description: BaseNFT defines a non fungible token.
            title: QueryNFTResponse is the response type for the Query/NFT RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          in: path
          required: true
          type: string
        - name: id
          in: path
          required: true
          type: string
      tags:
        - Query
  '/irismod/nft/owners/{owner}':
    get:
      summary: Owner queries the NFTs of the specified owner
      operationId: Owner
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              owner:
                type: object
                properties:
                  address:
                    type: string
                    format: byte
                  id_collections:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        ids:
                          type: array
                          items:
                            type: string
            title: >-
              QueryOwnerResponse is the response type for the Query/Owner RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: owner
          in: path
          required: true
          type: string
          format: byte
        - name: denom
          in: query
          required: false
          type: string
      tags:
        - Query
  '/irismod/nft/supplies/{denom}':
    get:
      summary: Supply queries the total supply of a given denom or owner
      operationId: Supply
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              amount:
                type: string
                format: uint64
            title: >-
              QuerySupplyResponse is the response type for the Query/Supply RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          in: path
          required: true
          type: string
        - name: owner
          in: query
          required: false
          type: string
          format: byte
      tags:
        - Query
  '/irismod/record/records/{record_id}':
    get:
      summary: Record queries the record by the given record ID
      operationId: Record
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              record:
                type: object
                properties:
                  tx_hash:
                    type: string
                    format: byte
                  contents:
                    type: array
                    items:
                      type: object
                      properties:
                        digest:
                          type: string
                        digest_algo:
                          type: string
                        uri:
                          type: string
                        meta:
                          type: string
                      description: Content defines the detailed information for a record.
                  creator:
                    type: string
                    format: byte
            title: >-
              QueryRecordResponse is the response type for the Query/Record RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: record_id
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  '/irismod/service/bindings/{service_name}':
    get:
      summary: Bindings returns all service Bindings with service name and owner
      operationId: Bindings
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              service_bindings:
                type: array
                items:
                  type: object
                  properties:
                    service_name:
                      type: string
                    provider:
                      type: string
                    deposit:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                    pricing:
                      type: string
                    qos:
                      type: string
                      format: uint64
                    options:
                      type: string
                    available:
                      type: boolean
                    disabled_time:
                      type: string
                      format: date-time
                    owner:
                      type: string
                      format: byte
                  description: ServiceBinding defines a standard for service binding.
            title: >-
              QueryDefinitionsResponse is response type for the Query/Bindings
              RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: service_name
          in: path
          required: true
          type: string
        - name: owner
          in: query
          required: false
          type: string
          format: byte
      tags:
        - Query
  '/irismod/service/bindings/{service_name}/{provider}':
    get:
      summary: Binding returns service Binding with service name and provider
      operationId: Binding
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              service_binding:
                type: object
                properties:
                  service_name:
                    type: string
                  provider:
                    type: string
                  deposit:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  pricing:
                    type: string
                  qos:
                    type: string
                    format: uint64
                  options:
                    type: string
                  available:
                    type: boolean
                  disabled_time:
                    type: string
                    format: date-time
                  owner:
                    type: string
                    format: byte
                description: ServiceBinding defines a standard for service binding.
            title: >-
              QueryDefinitionResponse is response type for the Query/Binding RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: service_name
          in: path
          required: true
          type: string
        - name: provider
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  '/irismod/service/contexts/{request_context_id}':
    get:
      summary: RequestContext returns the request context
      operationId: RequestContext
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              request_context:
                type: object
                properties:
                  service_name:
                    type: string
                  providers:
                    type: array
                    items:
                      type: string
                      format: byte
                  consumer:
                    type: string
                    format: byte
                  input:
                    type: string
                  service_fee_cap:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  module_name:
                    type: string
                  timeout:
                    type: string
                    format: int64
                  super_mode:
                    type: boolean
                  repeated:
                    type: boolean
                  repeated_frequency:
                    type: string
                    format: uint64
                  repeated_total:
                    type: string
                    format: int64
                  batch_counter:
                    type: string
                    format: uint64
                  batch_request_count:
                    type: integer
                    format: int64
                  batch_response_count:
                    type: integer
                    format: int64
                  batch_response_threshold:
                    type: integer
                    format: int64
                  response_threshold:
                    type: integer
                    format: int64
                  batch_state:
                    type: string
                    enum:
                      - BATCH_RUNNING
                      - BATCH_COMPLETED
                    default: BATCH_RUNNING
                    description: >-
                      - BATCH_RUNNING: BATCH_RUNNING defines the running batch
                      status.
                       - BATCH_COMPLETED: BATCH_COMPLETED defines the completed batch status.
                    title: >-
                      RequestContextBatchState is a type alias that represents a
                      request batch status as a byte
                  state:
                    type: string
                    enum:
                      - RUNNING
                      - PAUSED
                      - COMPLETED
                    default: RUNNING
                    description: >-
                      - RUNNING: RUNNING defines the running request context
                      status.
                       - PAUSED: PAUSED defines the paused request context status.
                       - COMPLETED: COMPLETED defines the completed request context status.
                    title: >-
                      RequestContextState is a type alias that represents a
                      request status as a byte
                description: RequestContext defines a standard for request context.
            title: >-
              QueryRequestContextResponse is response type for the
              Query/RequestContext RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: request_context_id
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  '/irismod/service/definitions/{service_name}':
    get:
      summary: Definition returns service definition
      operationId: Definition
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              service_definition:
                type: object
                properties:
                  name:
                    type: string
                  description:
                    type: string
                  tags:
                    type: array
                    items:
                      type: string
                  author:
                    type: string
                    format: byte
                  author_description:
                    type: string
                  schemas:
                    type: string
                description: ServiceDefinition defines a standard for service definition.
            title: >-
              QueryDefinitionResponse is response type for the Query/Definition
              RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: service_name
          in: path
          required: true
          type: string
      tags:
        - Query
  '/irismod/service/fees/{provider}':
    get:
      summary: EarnedFees returns the earned service fee of one provider
      operationId: EarnedFees
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              fees:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
            title: >-
              QueryEarnedFeesResponse is response type for the Query/EarnedFees
              RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: provider
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  /irismod/service/params:
    get:
      summary: Params queries the service parameters
      operationId: ServiceParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  max_request_timeout:
                    type: string
                    format: int64
                  min_deposit_multiple:
                    type: string
                    format: int64
                  min_deposit:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  service_fee_tax:
                    type: string
                  slash_fraction:
                    type: string
                  complaint_retrospect:
                    type: string
                  arbitration_time_limit:
                    type: string
                  tx_size_limit:
                    type: string
                    format: uint64
                  base_denom:
                    type: string
                title: service parameters
              res:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: |-
                  message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                title: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the corresponding

                  request message has used PageRequest
            title: >-
              QueryParametersResponse is response type for the Query/Parameters
              RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  '/irismod/service/requests/{request_context_id}/{batch_counter}':
    get:
      summary: RequestsByReqCtx returns all requests of one service call batch
      operationId: RequestsByReqCtx
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              requests:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: byte
                    service_name:
                      type: string
                    provider:
                      type: string
                      format: byte
                    consumer:
                      type: string
                      format: byte
                    input:
                      type: string
                    service_fee:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                    super_mode:
                      type: boolean
                    request_height:
                      type: string
                      format: int64
                    expiration_height:
                      type: string
                      format: int64
                    request_context_id:
                      type: string
                      format: byte
                    request_context_batch_counter:
                      type: string
                      format: uint64
                  description: Request defines a standard for request.
            title: >-
              QueryRequestsByReqCtxResponse is response type for the
              Query/RequestsByReqCtx RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: request_context_id
          in: path
          required: true
          type: string
          format: byte
        - name: batch_counter
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/irismod/service/requests/{request_id}':
    get:
      summary: Request returns the request
      operationId: Request
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              request:
                type: object
                properties:
                  id:
                    type: string
                    format: byte
                  service_name:
                    type: string
                  provider:
                    type: string
                    format: byte
                  consumer:
                    type: string
                    format: byte
                  input:
                    type: string
                  service_fee:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  super_mode:
                    type: boolean
                  request_height:
                    type: string
                    format: int64
                  expiration_height:
                    type: string
                    format: int64
                  request_context_id:
                    type: string
                    format: byte
                  request_context_batch_counter:
                    type: string
                    format: uint64
                description: Request defines a standard for request.
            title: >-
              QueryRequestResponse is response type for the Query/Request RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: request_id
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  '/irismod/service/requests/{service_name}/{provider}':
    get:
      summary: Request returns all requests of one service with provider
      operationId: Requests
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              requests:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: byte
                    service_name:
                      type: string
                    provider:
                      type: string
                      format: byte
                    consumer:
                      type: string
                      format: byte
                    input:
                      type: string
                    service_fee:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                    super_mode:
                      type: boolean
                    request_height:
                      type: string
                      format: int64
                    expiration_height:
                      type: string
                      format: int64
                    request_context_id:
                      type: string
                      format: byte
                    request_context_batch_counter:
                      type: string
                      format: uint64
                  description: Request defines a standard for request.
            title: >-
              QueryRequestsResponse is response type for the Query/Requests RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: service_name
          in: path
          required: true
          type: string
        - name: provider
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  '/irismod/service/responses/{request_context_id}/{batch_counter}':
    get:
      summary: Responses returns all responses of one service call batch
      operationId: Responses
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              responses:
                type: array
                items:
                  type: object
                  properties:
                    provider:
                      type: string
                      format: byte
                    consumer:
                      type: string
                      format: byte
                    result:
                      type: string
                    output:
                      type: string
                    request_context_id:
                      type: string
                      format: byte
                    request_context_batch_counter:
                      type: string
                      format: uint64
                  description: Response defines a standard for response.
            title: >-
              QueryResponsesResponse is response type for the Query/Responses
              RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: request_context_id
          in: path
          required: true
          type: string
          format: byte
        - name: batch_counter
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  '/irismod/service/responses/{request_id}':
    get:
      summary: Response returns the response of request
      operationId: Response
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              response:
                type: object
                properties:
                  provider:
                    type: string
                    format: byte
                  consumer:
                    type: string
                    format: byte
                  result:
                    type: string
                  output:
                    type: string
                  request_context_id:
                    type: string
                    format: byte
                  request_context_batch_counter:
                    type: string
                    format: uint64
                description: Response defines a standard for response.
            title: >-
              QueryResponseResponse is response type for the Query/Response RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: request_id
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  '/irismod/service/schemas/{schema_name}':
    get:
      summary: Schema returns the schema
      operationId: Schema
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              schema:
                type: string
            title: >-
              QuerySchemaResponse is response type for the Query/Schema RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: schema_name
          in: path
          required: true
          type: string
      tags:
        - Query
  '/irismod/service/{owner}/withdraw-address':
    get:
      summary: WithdrawAddress returns the withdraw address of the binding owner
      operationId: WithdrawAddress
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              withdraw_address:
                type: string
                format: byte
            title: >-
              QueryWithdrawAddressResponse is response type for the
              Query/WithdrawAddress RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: owner
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  /irismod/token/params:
    get:
      summary: Params queries the token parameters
      operationId: TokenParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  token_tax_rate:
                    type: string
                  issue_token_base_fee:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                  mint_token_fee_ratio:
                    type: string
                title: token parameters
              res:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: |-
                  message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                title: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the corresponding

                  request message has used PageRequest
            title: >-
              QueryParametersResponse is response type for the Query/Parameters
              RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /irismod/token/tokens:
    get:
      summary: Tokens returns the token list
      operationId: Tokens
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              Tokens:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
            title: >-
              QueryTokensResponse is response type for the Query/Tokens RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: owner
          in: query
          required: false
          type: string
          format: byte
      tags:
        - Query
  '/irismod/token/tokens/{denom}':
    get:
      summary: Token returns token with token name
      operationId: Token
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              Token:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            title: QueryTokenResponse is response type for the Query/Token RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: denom
          in: path
          required: true
          type: string
      tags:
        - Query
  '/irismod/token/{symbol}/fees':
    get:
      summary: Fees returns the fees to issue or mint a token
      operationId: Fees
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              exist:
                type: boolean
              issue_fee:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              mint_fee:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            title: QueryFeesResponse is response type for the Query/Fees RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: symbol
          in: path
          required: true
          type: string
      tags:
        - Query
  /iritamod/validator/params:
    get:
      summary: Params queries the parameters of the validator module
      operationId: ValidatorParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  historical_entries:
                    type: integer
                    format: int64
                description: Params defines the parameters for the staking module.
            title: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /iritamod/validator/validators:
    get:
      summary: Validators queries the validators
      operationId: Validators
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              validators:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: byte
                    name:
                      type: string
                    pubkey:
                      type: string
                    certificate:
                      type: string
                    power:
                      type: string
                      format: int64
                    description:
                      type: string
                    jailed:
                      type: boolean
                    operator:
                      type: string
                      format: byte
                  description: >-
                    Request defines a standard for validator. The validator will
                    participate the

                    blockchain consensus, power determines the probability of
                    proposing a new block.
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: |-
                  message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
                title: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the corresponding

                  request message has used PageRequest
            title: >-
              QueryValidatorsResponse is the response type for the
              Query/Validators RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs. count_total

            is only respected when offset is used. It is ignored when key is
            set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  '/iritamod/validator/validators/{id}':
    get:
      summary: Validator queries the validator by the given id
      operationId: Validator
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              validator:
                type: object
                properties:
                  id:
                    type: string
                    format: byte
                  name:
                    type: string
                  pubkey:
                    type: string
                  certificate:
                    type: string
                  power:
                    type: string
                    format: int64
                  description:
                    type: string
                  jailed:
                    type: boolean
                  operator:
                    type: string
                    format: byte
                description: >-
                  Request defines a standard for validator. The validator will
                  participate the

                  blockchain consensus, power determines the probability of
                  proposing a new block.
            title: >-
              QueryValidatorResponse is the response type for the
              Query/Validator RPC method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  '/iritamod/identity/identities/{id}':
    get:
      summary: Identity queries the identity by the given id
      operationId: Identity
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              identity:
                type: object
                properties:
                  id:
                    type: string
                    format: byte
                  pub_keys:
                    type: array
                    items:
                      type: object
                      properties:
                        pub_key:
                          type: string
                          format: byte
                        algorithm:
                          type: string
                          enum:
                            - UnknownPubKeyAlgorithm
                            - RSA
                            - DSA
                            - ECDSA
                            - ED25519
                            - SM2
                          default: UnknownPubKeyAlgorithm
                          description: >-
                            - UnknownPubKeyAlgorithm: UnknownPubKeyAlgorithm
                            defines an unknown algorithm name
                             - RSA: RSA defines a RSA algorithm name
                             - DSA: DSA defines a DSA algorithm name.
                             - ECDSA: ECDSA defines an ECDSA algorithm name.
                             - ED25519: ED25519 defines an ED25519 algorithm name.
                             - SM2: SM2 defines an SM2 algorithm name.
                          title: >-
                            PubKeyAlgorithm defines the algorithm names for the
                            public key
                      title: >-
                        PubKey represents a public key along with the
                        corresponding algorithm
                  certificates:
                    type: array
                    items:
                      type: string
                  credentials:
                    type: string
                  owner:
                    type: string
                    format: byte
                title: Identity defines a struct for an identity
            title: >-
              QueryIdentityResponse is response type for the Query/Identity RPC
              method
        default:
          description: An unexpected error response
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
definitions:
  CheckTxResult:
    type: object
    properties:
      code:
        type: integer
      data:
        type: string
      gas_used:
        type: integer
      gas_wanted:
        type: integer
      info:
        type: string
      log:
        type: string
      tags:
        type: array
        items:
          type: object
          properties:
            key:
              type: string
            value:
              type: string
    example:
      code: 0
      data: data
      log: log
      gas_used: 5000
      gas_wanted: 10000
      info: info
      tags:
        - ''
        - ''
  DeliverTxResult:
    type: object
    properties:
      code:
        type: integer
      data:
        type: string
      gas_used:
        type: integer
      gas_wanted:
        type: integer
      info:
        type: string
      log:
        type: string
      tags:
        type: array
        items:
          type: object
          properties:
            key:
              type: string
            value:
              type: string
    example:
      code: 5
      data: data
      log: log
      gas_used: 5000
      gas_wanted: 10000
      info: info
      tags:
        - ''
        - ''
  BroadcastTxCommitResult:
    type: object
    properties:
      check_tx:
        type: object
        properties:
          code:
            type: integer
          data:
            type: string
          gas_used:
            type: integer
          gas_wanted:
            type: integer
          info:
            type: string
          log:
            type: string
          tags:
            type: array
            items:
              type: object
              properties:
                key:
                  type: string
                value:
                  type: string
        example:
          code: 0
          data: data
          log: log
          gas_used: 5000
          gas_wanted: 10000
          info: info
          tags:
            - ''
            - ''
      deliver_tx:
        type: object
        properties:
          code:
            type: integer
          data:
            type: string
          gas_used:
            type: integer
          gas_wanted:
            type: integer
          info:
            type: string
          log:
            type: string
          tags:
            type: array
            items:
              type: object
              properties:
                key:
                  type: string
                value:
                  type: string
        example:
          code: 5
          data: data
          log: log
          gas_used: 5000
          gas_wanted: 10000
          info: info
          tags:
            - ''
            - ''
      hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      height:
        type: integer
  KVPair:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
  Msg:
    type: string
  Address:
    type: string
    description: bech32 encoded address
    example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
  ValidatorAddress:
    type: string
    description: bech32 encoded address
    example: iva1zx9jugxl5nzggdgzmut8adnc8rgwztm0dyez3r
  Coin:
    type: object
    properties:
      denom:
        type: string
        example: point
      amount:
        type: string
        example: '50'
  Hash:
    type: string
    example: EE5F3404034C524501629B56E0DDC38FAD651F04
  TxQuery:
    type: object
    properties:
      hash:
        type: string
        example: D085138D913993919295FF4B0A9107F1F2CDE0D37A87CE0644E217CBF3B49656
      height:
        type: number
        example: 368
      tx:
        type: object
        properties:
          msg:
            type: array
            items:
              type: string
          fee:
            type: object
            properties:
              gas:
                type: string
              amount:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                      example: point
                    amount:
                      type: string
                      example: '50'
          memo:
            type: string
          signature:
            type: object
            properties:
              signature:
                type: string
                example: >-
                  MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
              pub_key:
                type: object
                properties:
                  type:
                    type: string
                    example: tendermint/PubKeySecp256k1
                  value:
                    type: string
                    example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
              account_number:
                type: string
                example: '0'
              sequence:
                type: string
                example: '0'
      result:
        type: object
        properties:
          log:
            type: string
          gas_wanted:
            type: string
            example: '200000'
          gas_used:
            type: string
            example: '26354'
          tags:
            type: array
            items:
              type: object
              properties:
                key:
                  type: string
                value:
                  type: string
  PaginatedQueryTxs:
    type: object
    properties:
      total_count:
        type: number
        example: 1
      count:
        type: number
        example: 1
      page_number:
        type: number
        example: 1
      page_total:
        type: number
        example: 1
      limit:
        type: number
        example: 30
      txs:
        type: array
        items:
          type: object
          properties:
            hash:
              type: string
              example: D085138D913993919295FF4B0A9107F1F2CDE0D37A87CE0644E217CBF3B49656
            height:
              type: number
              example: 368
            tx:
              type: object
              properties:
                msg:
                  type: array
                  items:
                    type: string
                fee:
                  type: object
                  properties:
                    gas:
                      type: string
                    amount:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                            example: point
                          amount:
                            type: string
                            example: '50'
                memo:
                  type: string
                signature:
                  type: object
                  properties:
                    signature:
                      type: string
                      example: >-
                        MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
                    pub_key:
                      type: object
                      properties:
                        type:
                          type: string
                          example: tendermint/PubKeySecp256k1
                        value:
                          type: string
                          example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
                    account_number:
                      type: string
                      example: '0'
                    sequence:
                      type: string
                      example: '0'
            result:
              type: object
              properties:
                log:
                  type: string
                gas_wanted:
                  type: string
                  example: '200000'
                gas_used:
                  type: string
                  example: '26354'
                tags:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                      value:
                        type: string
  StdTx:
    type: object
    properties:
      msg:
        type: array
        items:
          type: string
      fee:
        type: object
        properties:
          gas:
            type: string
          amount:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                  example: point
                amount:
                  type: string
                  example: '50'
      memo:
        type: string
      signature:
        type: object
        properties:
          signature:
            type: string
            example: >-
              MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
          pub_key:
            type: object
            properties:
              type:
                type: string
                example: tendermint/PubKeySecp256k1
              value:
                type: string
                example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
          account_number:
            type: string
            example: '0'
          sequence:
            type: string
            example: '0'
  BlockID:
    type: object
    properties:
      hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      parts:
        type: object
        properties:
          total:
            type: number
            example: 0
          hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
  BlockHeader:
    type: object
    properties:
      chain_id:
        type: string
        example: Irita
      height:
        type: number
        example: 1
      time:
        type: string
        example: '2017-12-30T05:53:09.287+01:00'
      num_txs:
        type: number
        example: 0
      last_block_id:
        type: object
        properties:
          hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
          parts:
            type: object
            properties:
              total:
                type: number
                example: 0
              hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
      total_txs:
        type: number
        example: 35
      last_commit_hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      data_hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      validators_hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      next_validators_hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      consensus_hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      app_hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      last_results_hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      evidence_hash:
        type: string
        example: EE5F3404034C524501629B56E0DDC38FAD651F04
      proposer_address:
        type: string
        description: bech32 encoded address
        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      version:
        type: object
        properties:
          block:
            type: string
            example: 10
          app:
            type: string
            example: 0
  Block:
    type: object
    properties:
      header:
        type: object
        properties:
          chain_id:
            type: string
            example: Irita
          height:
            type: number
            example: 1
          time:
            type: string
            example: '2017-12-30T05:53:09.287+01:00'
          num_txs:
            type: number
            example: 0
          last_block_id:
            type: object
            properties:
              hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              parts:
                type: object
                properties:
                  total:
                    type: number
                    example: 0
                  hash:
                    type: string
                    example: EE5F3404034C524501629B56E0DDC38FAD651F04
          total_txs:
            type: number
            example: 35
          last_commit_hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
          data_hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
          validators_hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
          next_validators_hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
          consensus_hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
          app_hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
          last_results_hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
          evidence_hash:
            type: string
            example: EE5F3404034C524501629B56E0DDC38FAD651F04
          proposer_address:
            type: string
            description: bech32 encoded address
            example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
          version:
            type: object
            properties:
              block:
                type: string
                example: 10
              app:
                type: string
                example: 0
      txs:
        type: array
        items:
          type: string
      evidence:
        type: array
        items:
          type: string
      last_commit:
        type: object
        properties:
          block_id:
            type: object
            properties:
              hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              parts:
                type: object
                properties:
                  total:
                    type: number
                    example: 0
                  hash:
                    type: string
                    example: EE5F3404034C524501629B56E0DDC38FAD651F04
          precommits:
            type: array
            items:
              type: object
              properties:
                validator_address:
                  type: string
                validator_index:
                  type: string
                  example: '0'
                height:
                  type: string
                  example: '0'
                round:
                  type: string
                  example: '0'
                timestamp:
                  type: string
                  example: '2017-12-30T05:53:09.287+01:00'
                type:
                  type: number
                  example: 2
                block_id:
                  type: object
                  properties:
                    hash:
                      type: string
                      example: EE5F3404034C524501629B56E0DDC38FAD651F04
                    parts:
                      type: object
                      properties:
                        total:
                          type: number
                          example: 0
                        hash:
                          type: string
                          example: EE5F3404034C524501629B56E0DDC38FAD651F04
                signature:
                  type: string
                  example: >-
                    7uTC74QlknqYWEwg7Vn6M8Om7FuZ0EO4bjvuj6rwH1mTUJrRuMMZvAAqT9VjNgP0RA/TDp6u/92AqrZfXJSpBQ==
  BlockQuery:
    type: object
    properties:
      block_meta:
        type: object
        properties:
          header:
            type: object
            properties:
              chain_id:
                type: string
                example: Irita
              height:
                type: number
                example: 1
              time:
                type: string
                example: '2017-12-30T05:53:09.287+01:00'
              num_txs:
                type: number
                example: 0
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    example: EE5F3404034C524501629B56E0DDC38FAD651F04
                  parts:
                    type: object
                    properties:
                      total:
                        type: number
                        example: 0
                      hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
              total_txs:
                type: number
                example: 35
              last_commit_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              data_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              validators_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              next_validators_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              consensus_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              app_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              last_results_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              evidence_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              proposer_address:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
              version:
                type: object
                properties:
                  block:
                    type: string
                    example: 10
                  app:
                    type: string
                    example: 0
          block_id:
            type: object
            properties:
              hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              parts:
                type: object
                properties:
                  total:
                    type: number
                    example: 0
                  hash:
                    type: string
                    example: EE5F3404034C524501629B56E0DDC38FAD651F04
      block:
        type: object
        properties:
          header:
            type: object
            properties:
              chain_id:
                type: string
                example: Irita
              height:
                type: number
                example: 1
              time:
                type: string
                example: '2017-12-30T05:53:09.287+01:00'
              num_txs:
                type: number
                example: 0
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    example: EE5F3404034C524501629B56E0DDC38FAD651F04
                  parts:
                    type: object
                    properties:
                      total:
                        type: number
                        example: 0
                      hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
              total_txs:
                type: number
                example: 35
              last_commit_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              data_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              validators_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              next_validators_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              consensus_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              app_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              last_results_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              evidence_hash:
                type: string
                example: EE5F3404034C524501629B56E0DDC38FAD651F04
              proposer_address:
                type: string
                description: bech32 encoded address
                example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
              version:
                type: object
                properties:
                  block:
                    type: string
                    example: 10
                  app:
                    type: string
                    example: 0
          txs:
            type: array
            items:
              type: string
          evidence:
            type: array
            items:
              type: string
          last_commit:
            type: object
            properties:
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    example: EE5F3404034C524501629B56E0DDC38FAD651F04
                  parts:
                    type: object
                    properties:
                      total:
                        type: number
                        example: 0
                      hash:
                        type: string
                        example: EE5F3404034C524501629B56E0DDC38FAD651F04
              precommits:
                type: array
                items:
                  type: object
                  properties:
                    validator_address:
                      type: string
                    validator_index:
                      type: string
                      example: '0'
                    height:
                      type: string
                      example: '0'
                    round:
                      type: string
                      example: '0'
                    timestamp:
                      type: string
                      example: '2017-12-30T05:53:09.287+01:00'
                    type:
                      type: number
                      example: 2
                    block_id:
                      type: object
                      properties:
                        hash:
                          type: string
                          example: EE5F3404034C524501629B56E0DDC38FAD651F04
                        parts:
                          type: object
                          properties:
                            total:
                              type: number
                              example: 0
                            hash:
                              type: string
                              example: EE5F3404034C524501629B56E0DDC38FAD651F04
                    signature:
                      type: string
                      example: >-
                        7uTC74QlknqYWEwg7Vn6M8Om7FuZ0EO4bjvuj6rwH1mTUJrRuMMZvAAqT9VjNgP0RA/TDp6u/92AqrZfXJSpBQ==
  DelegationDelegatorReward:
    type: object
    properties:
      validator_address:
        type: string
        description: bech32 encoded address
        example: iva1zx9jugxl5nzggdgzmut8adnc8rgwztm0dyez3r
      reward:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              example: point
            amount:
              type: string
              example: '50'
  DelegatorTotalRewards:
    type: object
    properties:
      rewards:
        type: array
        items:
          type: object
          properties:
            validator_address:
              type: string
              description: bech32 encoded address
              example: iva1zx9jugxl5nzggdgzmut8adnc8rgwztm0dyez3r
            reward:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                    example: point
                  amount:
                    type: string
                    example: '50'
      total:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              example: point
            amount:
              type: string
              example: '50'
  BaseReq:
    type: object
    properties:
      from:
        type: string
        example: iaa12jyx7smkhpzgjudh73gxmcgt9chxtpeue6y6cy
        description: Sender address or Keybase name to generate a transaction
      memo:
        type: string
        example: Sent via Irita
      chain_id:
        type: string
        example: Irita
      account_number:
        type: string
        example: '0'
      sequence:
        type: string
        example: '1'
      gas:
        type: string
        example: '200000'
      gas_adjustment:
        type: string
        example: '1.2'
      fees:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              example: point
            amount:
              type: string
              example: '50'
      simulate:
        type: boolean
        example: false
        description: >-
          Estimate gas for a transaction (cannot be used in conjunction with
          generate_only)
  TendermintValidator:
    type: object
    properties:
      address:
        type: string
        description: bech32 encoded address
        example: iva1zx9jugxl5nzggdgzmut8adnc8rgwztm0dyez3r
      pub_key:
        type: string
        example: >-
          icp1ulx45dfpqr6dfashqwasg835vvuz25f7v827w0sxcl028ywktr5l0ct938h3cslc5nf
      voting_power:
        type: string
        example: '1000'
      proposer_priority:
        type: string
        example: '1000'
  TextProposal:
    type: object
    properties:
      proposal_id:
        type: integer
      title:
        type: string
      description:
        type: string
      proposal_type:
        type: string
      proposal_status:
        type: string
      final_tally_result:
        type: object
        properties:
          'yes':
            type: string
            example: '0.0000000000'
          abstain:
            type: string
            example: '0.0000000000'
          'no':
            type: string
            example: '0.0000000000'
          no_with_veto:
            type: string
            example: '0.0000000000'
      submit_time:
        type: string
      total_deposit:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              example: point
            amount:
              type: string
              example: '50'
      voting_start_time:
        type: string
  Proposer:
    type: object
    properties:
      proposal_id:
        type: string
      proposer:
        type: string
  Deposit:
    type: object
    properties:
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              example: point
            amount:
              type: string
              example: '50'
      proposal_id:
        type: string
      depositor:
        type: string
        description: bech32 encoded address
        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
  TallyResult:
    type: object
    properties:
      'yes':
        type: string
        example: '0.0000000000'
      abstain:
        type: string
        example: '0.0000000000'
      'no':
        type: string
        example: '0.0000000000'
      no_with_veto:
        type: string
        example: '0.0000000000'
  Vote:
    type: object
    properties:
      voter:
        type: string
      proposal_id:
        type: string
      option:
        type: string
  Validator:
    type: object
    properties:
      name:
        type: string
      moniker:
        type: string
      pubkey:
        type: string
      power:
        type: integer
      details:
        type: string
      jailed:
        type: boolean
      Operator:
        type: string
        description: bech32 encoded address
        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
  PublicKey:
    type: object
    properties:
      type:
        type: string
      value:
        type: string
  ParamChange:
    type: object
    properties:
      subspace:
        type: string
        example: staking
      key:
        type: string
        example: MaxValidators
      subkey:
        type: string
        example: ''
      value:
        type: object
  Supply:
    type: object
    properties:
      total:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              example: point
            amount:
              type: string
              example: '50'
  Token:
    type: object
    properties:
      symbol:
        type: string
      name:
        type: string
      min_unit:
        type: string
      scale:
        type: integer
      initial_supply:
        type: string
      max_supply:
        type: string
      mintable:
        type: boolean
      owner:
        type: string
        description: bech32 encoded address
        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
  TokenFeesOutput:
    type: object
    properties:
      exist:
        type: boolean
      issue_fee:
        type: object
        properties:
          denom:
            type: string
            example: point
          amount:
            type: string
            example: '50'
      mint_fee:
        type: object
        properties:
          denom:
            type: string
            example: point
          amount:
            type: string
            example: '50'
  NFT:
    type: object
    properties:
      id:
        type: string
      owner:
        type: string
        description: bech32 encoded address
        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      token_uri:
        type: string
  IDCollection:
    type: object
    properties:
      denom:
        type: string
      IDs:
        type: array
        items:
          type: string
  NFTOwner:
    type: object
    properties:
      address:
        type: string
        description: bech32 encoded address
        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      id_collections:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            IDs:
              type: array
              items:
                type: string
  ServiceDefinition:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      tags:
        type: array
        items:
          type: string
      author:
        type: string
        description: bech32 encoded address
        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      author_description:
        type: string
      schemas:
        type: string
        example: >-
          {"input":{"type":"object"},"output":{"type":"object"},"error":{"type":"object"}}
  ServiceBinding:
    type: object
    properties:
      service_name:
        type: string
      provider:
        type: string
        description: bech32 encoded address
        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      deposit:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              example: point
            amount:
              type: string
              example: '50'
      pricing:
        type: string
        example: '{"price":"1iris"}'
      min_resp_time:
        type: integer
      available:
        type: boolean
      disabled_time:
        type: string
  ServiceRequest:
    type: object
    properties:
      service_name:
        type: string
      provider:
        type: string
        description: bech32 encoded address
        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      consumer:
        type: string
        description: bech32 encoded address
        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      input:
        type: string
        example: '{"id":1}'
      service_fee:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              example: point
            amount:
              type: string
              example: '50'
      super_mode:
        type: boolean
      request_height:
        type: integer
      expiration_height:
        type: integer
      request_context_id:
        type: string
      request_context_batch_counter:
        type: integer
  ServiceResponse:
    type: object
    properties:
      provider:
        type: string
        description: bech32 encoded address
        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      consumer:
        type: string
        description: bech32 encoded address
        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      result:
        type: string
        example: '{"code":200,"message":""}'
      output:
        type: string
        example: '{"name":"irisnet"}'
      request_context_id:
        type: string
      request_context_batch_counter:
        type: integer
  RequestContext:
    type: object
    properties:
      service_name:
        type: string
      providers:
        type: array
        items:
          type: string
          description: bech32 encoded address
          example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      consumer:
        type: string
        description: bech32 encoded address
        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      input:
        type: string
        example: '{"id":1}'
      service_fee_cap:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              example: point
            amount:
              type: string
              example: '50'
      timeout:
        type: integer
      super_mode:
        type: boolean
      repeated:
        type: boolean
      repeated_frequency:
        type: integer
      repeated_total:
        type: integer
      batch_counter:
        type: integer
      batch_request_count:
        type: integer
      batch_response_count:
        type: integer
      batch_response_threshold:
        type: integer
      batch_state:
        type: string
      state:
        type: string
      response_threshold:
        type: integer
      module_name:
        type: string
  EarnedFees:
    type: object
    properties:
      address:
        type: string
        description: bech32 encoded address
        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              example: point
            amount:
              type: string
              example: '50'
  Identity:
    type: object
    properties:
      id:
        type: string
        example: 2c4355bcceef470b823ca0fe24a2d900
      pubkeys:
        type: array
        items:
          type: object
          properties:
            pubkey:
              type: string
              example: >-
                02fdf3dde4468dad14138acc85e0152ee1ee08750627df5dd5c17a1013fe5d59ea
            algorithm:
              type: string
              example: ECDSA
      certificates:
        type: array
        items:
          type: string
      credentials:
        type: string
        example: 'https://kyc.com/user/10001'
      owner:
        type: string
        description: bech32 encoded address
        example: iaa1g7cl85hm2f9jkp7pp2cd5l7tkzzrmffjah9tsf
  cosmos.auth.v1beta1.Params:
    type: object
    properties:
      max_memo_characters:
        type: string
        format: uint64
      tx_sig_limit:
        type: string
        format: uint64
      tx_size_cost_per_byte:
        type: string
        format: uint64
      sig_verify_cost_ed25519:
        type: string
        format: uint64
      sig_verify_cost_secp256k1:
        type: string
        format: uint64
      sig_verify_cost_sm2:
        type: string
        format: uint64
    description: Params defines the parameters for the auth module.
  cosmos.auth.v1beta1.QueryAccountResponse:
    type: object
    properties:
      account:
        description: account defines the account of the corresponding address.
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
    description: >-
      QueryAccountResponse is the response type for the Query/Account RPC
      method.
  cosmos.auth.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          max_memo_characters:
            type: string
            format: uint64
          tx_sig_limit:
            type: string
            format: uint64
          tx_size_cost_per_byte:
            type: string
            format: uint64
          sig_verify_cost_ed25519:
            type: string
            format: uint64
          sig_verify_cost_secp256k1:
            type: string
            format: uint64
          sig_verify_cost_sm2:
            type: string
            format: uint64
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  google.protobuf.Any:
    type: object
    properties:
      type_url:
        type: string
        description: >-
          A URL/resource name that uniquely identifies the type of the
          serialized

          protocol buffer message. This string must contain at least

          one "/" character. The last segment of the URL's path must represent

          the fully qualified name of the type (as in

          `path/google.protobuf.Duration`). The name should be in a canonical
          form

          (e.g., leading "." is not accepted).


          In practice, teams usually precompile into the binary all types that
          they

          expect it to use in the context of Any. However, for URLs which use
          the

          scheme `http`, `https`, or no scheme, one can optionally set up a type

          server that maps type URLs to message definitions as follows:


          * If no scheme is provided, `https` is assumed.

          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official

          protobuf release, and it is not used for type URLs beginning with

          type.googleapis.com.


          Schemes other than `http`, `https` (or the empty scheme) might be

          used with implementation specific semantics.
      value:
        type: string
        format: byte
        description: >-
          Must be a valid serialized protocol buffer of the above specified
          type.
    description: >-
      `Any` contains an arbitrary serialized protocol buffer message along with
      a

      URL that describes the type of the serialized message.


      Protobuf library provides support to pack/unpack Any values in the form

      of utility functions or additional generated methods of the Any type.


      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := ptypes.MarshalAny(foo)
           ...
           foo := &pb.Foo{}
           if err := ptypes.UnmarshalAny(any, foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use

      'type.googleapis.com/full.type.name' as the type URL and the unpack

      methods only use the fully qualified type name after the last '/'

      in the type URL, for example "foo.bar.com/x/y.z" will yield type

      name "y.z".



      JSON

      ====

      The JSON representation of an `Any` value uses the regular

      representation of the deserialized, embedded message, with an

      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON

      representation, that representation will be embedded adding a field

      `value` which holds the custom JSON in addition to the `@type`

      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  grpc.gateway.runtime.Error:
    type: object
    properties:
      error:
        type: string
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
  cosmos.bank.v1beta1.Params:
    type: object
    properties:
      send_enabled:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            enabled:
              type: boolean
          description: >-
            SendEnabled maps coin denom to a send_enabled status (whether a
            denom is sendable).
      default_send_enabled:
        type: boolean
    description: Params defines the parameters for the bank module.
  cosmos.bank.v1beta1.QueryAllBalancesResponse:
    type: object
    properties:
      balances:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: balances is the balances of all the coins.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAllBalancesResponse is the response type for the Query/AllBalances
      RPC method.
  cosmos.bank.v1beta1.QueryBalanceResponse:
    type: object
    properties:
      balance:
        description: balance is the balance of the coin.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
    description: >-
      QueryBalanceResponse is the response type for the Query/Balance RPC
      method.
  cosmos.bank.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          send_enabled:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                enabled:
                  type: boolean
              description: >-
                SendEnabled maps coin denom to a send_enabled status (whether a
                denom is sendable).
          default_send_enabled:
            type: boolean
        description: Params defines the parameters for the bank module.
    description: >-
      QueryParamsResponse defines the response type for querying x/bank
      parameters.
  cosmos.bank.v1beta1.QuerySupplyOfResponse:
    type: object
    properties:
      amount:
        description: amount is the supply of the coin.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
    description: >-
      QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC
      method.
  cosmos.bank.v1beta1.QueryTotalSupplyResponse:
    type: object
    properties:
      supply:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: supply is the supply of the coins
    title: >-
      QueryTotalSupplyResponse is the response type for the Query/TotalSupply
      RPC method
  cosmos.bank.v1beta1.SendEnabled:
    type: object
    properties:
      denom:
        type: string
      enabled:
        type: boolean
    description: >-
      SendEnabled maps coin denom to a send_enabled status (whether a denom is
      sendable).
  cosmos.base.query.v1beta1.PageRequest:
    type: object
    properties:
      key:
        type: string
        format: byte
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
      offset:
        type: string
        format: uint64
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
      limit:
        type: string
        format: uint64
        description: >-
          limit is the total number of results to be returned in the result
          page.

          If left empty it will default to a value to be set by each app.
      count_total:
        type: boolean
        description: >-
          count_total is set to true  to indicate that the result set should
          include

          a count of the total number of items available for pagination in UIs.
          count_total

          is only respected when offset is used. It is ignored when key is set.
    description: |-
      message SomeRequest {
               Foo some_parameter = 1;
               PageRequest pagination = 2;
       }
    title: |-
      PageRequest is to be embedded in gRPC request messages for efficient
      pagination. Ex:
  cosmos.base.query.v1beta1.PageResponse:
    type: object
    properties:
      next_key:
        type: string
        format: byte
        title: |-
          next_key is the key to be passed to PageRequest.key to
          query the next page most efficiently
      total:
        type: string
        format: uint64
        title: |-
          total is total number of results available if PageRequest.count_total
          was set, its value is undefined otherwise
    description: >-
      PageResponse is to be embedded in gRPC response messages where the
      corresponding

      request message has used PageRequest.

       message SomeResponse {
               repeated Bar results = 1;
               PageResponse page = 2;
       }
  cosmos.base.v1beta1.Coin:
    type: object
    properties:
      denom:
        type: string
      amount:
        type: string
    description: |-
      Coin defines a token with a denomination and an amount.

      NOTE: The amount field is an Int which implements the custom method
      signatures required by gogoproto.
  cosmos.evidence.v1beta1.QueryAllEvidenceResponse:
    type: object
    properties:
      evidence:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        description: evidence returns all evidences.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAllEvidenceResponse is the response type for the Query/AllEvidence
      RPC method.
  cosmos.evidence.v1beta1.QueryEvidenceResponse:
    type: object
    properties:
      evidence:
        description: evidence returns the requested evidence.
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
    description: >-
      QueryEvidenceResponse is the response type for the Query/Evidence RPC
      method.
  cosmos.upgrade.v1beta1.Plan:
    type: object
    properties:
      name:
        type: string
        description: >-
          Sets the name for the upgrade. This name will be used by the upgraded
          version of the software to apply any

          special "on-upgrade" commands during the first BeginBlock method after
          the upgrade is applied. It is also used

          to detect whether a software version can handle a given upgrade. If no
          upgrade handler with this name has been

          set in the software, it will be assumed that the software is
          out-of-date when the upgrade Time or Height

          is reached and the software will exit.
      time:
        type: string
        format: date-time
        description: |-
          The time after which the upgrade must be performed.
          Leave set to its zero value to use a pre-defined Height instead.
      height:
        type: string
        format: int64
        description: |-
          The height at which the upgrade must be performed.
          Only used if Time is not set.
      info:
        type: string
        title: |-
          Any application specific upgrade info to be included on-chain
          such as a git commit that validators could automatically upgrade to
    description: >-
      Plan specifies information about a planned upgrade and when it should
      occur.
  cosmos.upgrade.v1beta1.QueryAppliedPlanResponse:
    type: object
    properties:
      height:
        type: string
        format: int64
        description: height is the block height at which the plan was applied.
    description: >-
      QueryAppliedPlanResponse is the response type for the Query/AppliedPlan
      RPC method.
  cosmos.upgrade.v1beta1.QueryCurrentPlanResponse:
    type: object
    properties:
      plan:
        description: plan is the current upgrade plan.
        type: object
        properties:
          name:
            type: string
            description: >-
              Sets the name for the upgrade. This name will be used by the
              upgraded version of the software to apply any

              special "on-upgrade" commands during the first BeginBlock method
              after the upgrade is applied. It is also used

              to detect whether a software version can handle a given upgrade.
              If no upgrade handler with this name has been

              set in the software, it will be assumed that the software is
              out-of-date when the upgrade Time or Height

              is reached and the software will exit.
          time:
            type: string
            format: date-time
            description: |-
              The time after which the upgrade must be performed.
              Leave set to its zero value to use a pre-defined Height instead.
          height:
            type: string
            format: int64
            description: |-
              The height at which the upgrade must be performed.
              Only used if Time is not set.
          info:
            type: string
            title: >-
              Any application specific upgrade info to be included on-chain

              such as a git commit that validators could automatically upgrade
              to
    description: >-
      QueryCurrentPlanResponse is the response type for the Query/CurrentPlan
      RPC method.
  irismod.nft.BaseNFT:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      uri:
        type: string
      data:
        type: string
      owner:
        type: string
        format: byte
    description: BaseNFT defines a non fungible token.
  irismod.nft.Collection:
    type: object
    properties:
      denom:
        type: object
        properties:
          id:
            type: string
          name:
            type: string
          schema:
            type: string
          creator:
            type: string
            format: byte
        description: Denom defines a type of NFT.
      nfts:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            uri:
              type: string
            data:
              type: string
            owner:
              type: string
              format: byte
          description: BaseNFT defines a non fungible token.
  irismod.nft.Denom:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      schema:
        type: string
      creator:
        type: string
        format: byte
    description: Denom defines a type of NFT.
  irismod.nft.IDCollection:
    type: object
    properties:
      denom:
        type: string
      ids:
        type: array
        items:
          type: string
  irismod.nft.Owner:
    type: object
    properties:
      address:
        type: string
        format: byte
      id_collections:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            ids:
              type: array
              items:
                type: string
  irismod.nft.QueryCollectionResponse:
    type: object
    properties:
      collection:
        type: object
        properties:
          denom:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              schema:
                type: string
              creator:
                type: string
                format: byte
            description: Denom defines a type of NFT.
          nfts:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                uri:
                  type: string
                data:
                  type: string
                owner:
                  type: string
                  format: byte
              description: BaseNFT defines a non fungible token.
    title: >-
      QueryCollectionResponse is the response type for the Query/Collection RPC
      method
  irismod.nft.QueryDenomResponse:
    type: object
    properties:
      denom:
        type: object
        properties:
          id:
            type: string
          name:
            type: string
          schema:
            type: string
          creator:
            type: string
            format: byte
        description: Denom defines a type of NFT.
    title: QueryDenomResponse is the response type for the Query/Denom RPC method
  irismod.nft.QueryDenomsResponse:
    type: object
    properties:
      denoms:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            schema:
              type: string
            creator:
              type: string
              format: byte
          description: Denom defines a type of NFT.
    title: QueryDenomsResponse is the response type for the Query/Denoms RPC method
  irismod.nft.QueryNFTResponse:
    type: object
    properties:
      nft:
        type: object
        properties:
          id:
            type: string
          name:
            type: string
          uri:
            type: string
          data:
            type: string
          owner:
            type: string
            format: byte
        description: BaseNFT defines a non fungible token.
    title: QueryNFTResponse is the response type for the Query/NFT RPC method
  irismod.nft.QueryOwnerResponse:
    type: object
    properties:
      owner:
        type: object
        properties:
          address:
            type: string
            format: byte
          id_collections:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                ids:
                  type: array
                  items:
                    type: string
    title: QueryOwnerResponse is the response type for the Query/Owner RPC method
  irismod.nft.QuerySupplyResponse:
    type: object
    properties:
      amount:
        type: string
        format: uint64
    title: QuerySupplyResponse is the response type for the Query/Supply RPC method
  irismod.record.Content:
    type: object
    properties:
      digest:
        type: string
      digest_algo:
        type: string
      uri:
        type: string
      meta:
        type: string
    description: Content defines the detailed information for a record.
  irismod.record.QueryRecordResponse:
    type: object
    properties:
      record:
        type: object
        properties:
          tx_hash:
            type: string
            format: byte
          contents:
            type: array
            items:
              type: object
              properties:
                digest:
                  type: string
                digest_algo:
                  type: string
                uri:
                  type: string
                meta:
                  type: string
              description: Content defines the detailed information for a record.
          creator:
            type: string
            format: byte
    title: QueryRecordResponse is the response type for the Query/Record RPC method
  irismod.record.Record:
    type: object
    properties:
      tx_hash:
        type: string
        format: byte
      contents:
        type: array
        items:
          type: object
          properties:
            digest:
              type: string
            digest_algo:
              type: string
            uri:
              type: string
            meta:
              type: string
          description: Content defines the detailed information for a record.
      creator:
        type: string
        format: byte
  cosmos.query.PageResponse:
    type: object
    properties:
      next_key:
        type: string
        format: byte
        title: |-
          next_key is the key to be passed to PageRequest.key to
          query the next page most efficiently
      total:
        type: string
        format: uint64
        title: |-
          total is total number of results available if PageRequest.count_total
          was set, its value is undefined otherwise
    description: |-
      message SomeResponse {
               repeated Bar results = 1;
               PageResponse page = 2;
       }
    title: >-
      PageResponse is to be embedded in gRPC response messages where the
      corresponding

      request message has used PageRequest
  irismod.service.Params:
    type: object
    properties:
      max_request_timeout:
        type: string
        format: int64
      min_deposit_multiple:
        type: string
        format: int64
      min_deposit:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      service_fee_tax:
        type: string
      slash_fraction:
        type: string
      complaint_retrospect:
        type: string
      arbitration_time_limit:
        type: string
      tx_size_limit:
        type: string
        format: uint64
      base_denom:
        type: string
    title: service parameters
  irismod.service.QueryBindingResponse:
    type: object
    properties:
      service_binding:
        type: object
        properties:
          service_name:
            type: string
          provider:
            type: string
          deposit:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          pricing:
            type: string
          qos:
            type: string
            format: uint64
          options:
            type: string
          available:
            type: boolean
          disabled_time:
            type: string
            format: date-time
          owner:
            type: string
            format: byte
        description: ServiceBinding defines a standard for service binding.
    title: QueryDefinitionResponse is response type for the Query/Binding RPC method
  irismod.service.QueryBindingsResponse:
    type: object
    properties:
      service_bindings:
        type: array
        items:
          type: object
          properties:
            service_name:
              type: string
            provider:
              type: string
            deposit:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            pricing:
              type: string
            qos:
              type: string
              format: uint64
            options:
              type: string
            available:
              type: boolean
            disabled_time:
              type: string
              format: date-time
            owner:
              type: string
              format: byte
          description: ServiceBinding defines a standard for service binding.
    title: >-
      QueryDefinitionsResponse is response type for the Query/Bindings RPC
      method
  irismod.service.QueryDefinitionResponse:
    type: object
    properties:
      service_definition:
        type: object
        properties:
          name:
            type: string
          description:
            type: string
          tags:
            type: array
            items:
              type: string
          author:
            type: string
            format: byte
          author_description:
            type: string
          schemas:
            type: string
        description: ServiceDefinition defines a standard for service definition.
    title: >-
      QueryDefinitionResponse is response type for the Query/Definition RPC
      method
  irismod.service.QueryEarnedFeesResponse:
    type: object
    properties:
      fees:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    title: >-
      QueryEarnedFeesResponse is response type for the Query/EarnedFees RPC
      method
  irismod.service.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          max_request_timeout:
            type: string
            format: int64
          min_deposit_multiple:
            type: string
            format: int64
          min_deposit:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          service_fee_tax:
            type: string
          slash_fraction:
            type: string
          complaint_retrospect:
            type: string
          arbitration_time_limit:
            type: string
          tx_size_limit:
            type: string
            format: uint64
          base_denom:
            type: string
        title: service parameters
      res:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        title: >-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding

          request message has used PageRequest
    title: >-
      QueryParametersResponse is response type for the Query/Parameters RPC
      method
  irismod.service.QueryRequestContextResponse:
    type: object
    properties:
      request_context:
        type: object
        properties:
          service_name:
            type: string
          providers:
            type: array
            items:
              type: string
              format: byte
          consumer:
            type: string
            format: byte
          input:
            type: string
          service_fee_cap:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          module_name:
            type: string
          timeout:
            type: string
            format: int64
          super_mode:
            type: boolean
          repeated:
            type: boolean
          repeated_frequency:
            type: string
            format: uint64
          repeated_total:
            type: string
            format: int64
          batch_counter:
            type: string
            format: uint64
          batch_request_count:
            type: integer
            format: int64
          batch_response_count:
            type: integer
            format: int64
          batch_response_threshold:
            type: integer
            format: int64
          response_threshold:
            type: integer
            format: int64
          batch_state:
            type: string
            enum:
              - BATCH_RUNNING
              - BATCH_COMPLETED
            default: BATCH_RUNNING
            description: |-
              - BATCH_RUNNING: BATCH_RUNNING defines the running batch status.
               - BATCH_COMPLETED: BATCH_COMPLETED defines the completed batch status.
            title: >-
              RequestContextBatchState is a type alias that represents a request
              batch status as a byte
          state:
            type: string
            enum:
              - RUNNING
              - PAUSED
              - COMPLETED
            default: RUNNING
            description: |-
              - RUNNING: RUNNING defines the running request context status.
               - PAUSED: PAUSED defines the paused request context status.
               - COMPLETED: COMPLETED defines the completed request context status.
            title: >-
              RequestContextState is a type alias that represents a request
              status as a byte
        description: RequestContext defines a standard for request context.
    title: >-
      QueryRequestContextResponse is response type for the Query/RequestContext
      RPC method
  irismod.service.QueryRequestResponse:
    type: object
    properties:
      request:
        type: object
        properties:
          id:
            type: string
            format: byte
          service_name:
            type: string
          provider:
            type: string
            format: byte
          consumer:
            type: string
            format: byte
          input:
            type: string
          service_fee:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          super_mode:
            type: boolean
          request_height:
            type: string
            format: int64
          expiration_height:
            type: string
            format: int64
          request_context_id:
            type: string
            format: byte
          request_context_batch_counter:
            type: string
            format: uint64
        description: Request defines a standard for request.
    title: QueryRequestResponse is response type for the Query/Request RPC method
  irismod.service.QueryRequestsByReqCtxResponse:
    type: object
    properties:
      requests:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: byte
            service_name:
              type: string
            provider:
              type: string
              format: byte
            consumer:
              type: string
              format: byte
            input:
              type: string
            service_fee:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            super_mode:
              type: boolean
            request_height:
              type: string
              format: int64
            expiration_height:
              type: string
              format: int64
            request_context_id:
              type: string
              format: byte
            request_context_batch_counter:
              type: string
              format: uint64
          description: Request defines a standard for request.
    title: >-
      QueryRequestsByReqCtxResponse is response type for the
      Query/RequestsByReqCtx RPC method
  irismod.service.QueryRequestsResponse:
    type: object
    properties:
      requests:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: byte
            service_name:
              type: string
            provider:
              type: string
              format: byte
            consumer:
              type: string
              format: byte
            input:
              type: string
            service_fee:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            super_mode:
              type: boolean
            request_height:
              type: string
              format: int64
            expiration_height:
              type: string
              format: int64
            request_context_id:
              type: string
              format: byte
            request_context_batch_counter:
              type: string
              format: uint64
          description: Request defines a standard for request.
    title: QueryRequestsResponse is response type for the Query/Requests RPC method
  irismod.service.QueryResponseResponse:
    type: object
    properties:
      response:
        type: object
        properties:
          provider:
            type: string
            format: byte
          consumer:
            type: string
            format: byte
          result:
            type: string
          output:
            type: string
          request_context_id:
            type: string
            format: byte
          request_context_batch_counter:
            type: string
            format: uint64
        description: Response defines a standard for response.
    title: QueryResponseResponse is response type for the Query/Response RPC method
  irismod.service.QueryResponsesResponse:
    type: object
    properties:
      responses:
        type: array
        items:
          type: object
          properties:
            provider:
              type: string
              format: byte
            consumer:
              type: string
              format: byte
            result:
              type: string
            output:
              type: string
            request_context_id:
              type: string
              format: byte
            request_context_batch_counter:
              type: string
              format: uint64
          description: Response defines a standard for response.
    title: QueryResponsesResponse is response type for the Query/Responses RPC method
  irismod.service.QuerySchemaResponse:
    type: object
    properties:
      schema:
        type: string
    title: QuerySchemaResponse is response type for the Query/Schema RPC method
  irismod.service.QueryWithdrawAddressResponse:
    type: object
    properties:
      withdraw_address:
        type: string
        format: byte
    title: >-
      QueryWithdrawAddressResponse is response type for the
      Query/WithdrawAddress RPC method
  irismod.service.Request:
    type: object
    properties:
      id:
        type: string
        format: byte
      service_name:
        type: string
      provider:
        type: string
        format: byte
      consumer:
        type: string
        format: byte
      input:
        type: string
      service_fee:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      super_mode:
        type: boolean
      request_height:
        type: string
        format: int64
      expiration_height:
        type: string
        format: int64
      request_context_id:
        type: string
        format: byte
      request_context_batch_counter:
        type: string
        format: uint64
    description: Request defines a standard for request.
  irismod.service.RequestContext:
    type: object
    properties:
      service_name:
        type: string
      providers:
        type: array
        items:
          type: string
          format: byte
      consumer:
        type: string
        format: byte
      input:
        type: string
      service_fee_cap:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      module_name:
        type: string
      timeout:
        type: string
        format: int64
      super_mode:
        type: boolean
      repeated:
        type: boolean
      repeated_frequency:
        type: string
        format: uint64
      repeated_total:
        type: string
        format: int64
      batch_counter:
        type: string
        format: uint64
      batch_request_count:
        type: integer
        format: int64
      batch_response_count:
        type: integer
        format: int64
      batch_response_threshold:
        type: integer
        format: int64
      response_threshold:
        type: integer
        format: int64
      batch_state:
        type: string
        enum:
          - BATCH_RUNNING
          - BATCH_COMPLETED
        default: BATCH_RUNNING
        description: |-
          - BATCH_RUNNING: BATCH_RUNNING defines the running batch status.
           - BATCH_COMPLETED: BATCH_COMPLETED defines the completed batch status.
        title: >-
          RequestContextBatchState is a type alias that represents a request
          batch status as a byte
      state:
        type: string
        enum:
          - RUNNING
          - PAUSED
          - COMPLETED
        default: RUNNING
        description: |-
          - RUNNING: RUNNING defines the running request context status.
           - PAUSED: PAUSED defines the paused request context status.
           - COMPLETED: COMPLETED defines the completed request context status.
        title: >-
          RequestContextState is a type alias that represents a request status
          as a byte
    description: RequestContext defines a standard for request context.
  irismod.service.RequestContextBatchState:
    type: string
    enum:
      - BATCH_RUNNING
      - BATCH_COMPLETED
    default: BATCH_RUNNING
    description: |-
      - BATCH_RUNNING: BATCH_RUNNING defines the running batch status.
       - BATCH_COMPLETED: BATCH_COMPLETED defines the completed batch status.
    title: >-
      RequestContextBatchState is a type alias that represents a request batch
      status as a byte
  irismod.service.RequestContextState:
    type: string
    enum:
      - RUNNING
      - PAUSED
      - COMPLETED
    default: RUNNING
    description: |-
      - RUNNING: RUNNING defines the running request context status.
       - PAUSED: PAUSED defines the paused request context status.
       - COMPLETED: COMPLETED defines the completed request context status.
    title: >-
      RequestContextState is a type alias that represents a request status as a
      byte
  irismod.service.Response:
    type: object
    properties:
      provider:
        type: string
        format: byte
      consumer:
        type: string
        format: byte
      result:
        type: string
      output:
        type: string
      request_context_id:
        type: string
        format: byte
      request_context_batch_counter:
        type: string
        format: uint64
    description: Response defines a standard for response.
  irismod.service.ServiceBinding:
    type: object
    properties:
      service_name:
        type: string
      provider:
        type: string
      deposit:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      pricing:
        type: string
      qos:
        type: string
        format: uint64
      options:
        type: string
      available:
        type: boolean
      disabled_time:
        type: string
        format: date-time
      owner:
        type: string
        format: byte
    description: ServiceBinding defines a standard for service binding.
  irismod.service.ServiceDefinition:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      tags:
        type: array
        items:
          type: string
      author:
        type: string
        format: byte
      author_description:
        type: string
      schemas:
        type: string
    description: ServiceDefinition defines a standard for service definition.
  irismod.token.Params:
    type: object
    properties:
      token_tax_rate:
        type: string
      issue_token_base_fee:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
      mint_token_fee_ratio:
        type: string
    title: token parameters
  irismod.token.QueryFeesResponse:
    type: object
    properties:
      exist:
        type: boolean
      issue_fee:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
      mint_fee:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    title: QueryFeesResponse is response type for the Query/Fees RPC method
  irismod.token.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          token_tax_rate:
            type: string
          issue_token_base_fee:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
          mint_token_fee_ratio:
            type: string
        title: token parameters
      res:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        title: >-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding

          request message has used PageRequest
    title: >-
      QueryParametersResponse is response type for the Query/Parameters RPC
      method
  irismod.token.QueryTokenResponse:
    type: object
    properties:
      Token:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    title: QueryTokenResponse is response type for the Query/Token RPC method
  irismod.token.QueryTokensResponse:
    type: object
    properties:
      Tokens:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
    title: QueryTokensResponse is response type for the Query/Tokens RPC method
  cosmos.query.PageRequest:
    type: object
    properties:
      key:
        type: string
        format: byte
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
      offset:
        type: string
        format: uint64
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
      limit:
        type: string
        format: uint64
        description: >-
          limit is the total number of results to be returned in the result
          page.

          If left empty it will default to a value to be set by each app.
      count_total:
        type: boolean
        description: >-
          count_total is set to true  to indicate that the result set should
          include

          a count of the total number of items available for pagination in UIs.
          count_total

          is only respected when offset is used. It is ignored when key is set.
    description: |-
      message SomeRequest {
               Foo some_parameter = 1;
               PageRequest page = 2;
       }
    title: |-
      PageRequest is to be embedded in gRPC request messages for efficient
      pagination. Ex:
  iritamod.validator.Params:
    type: object
    properties:
      historical_entries:
        type: integer
        format: int64
    description: Params defines the parameters for the staking module.
  iritamod.validator.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          historical_entries:
            type: integer
            format: int64
        description: Params defines the parameters for the staking module.
    title: QueryParamsResponse is the response type for the Query/Params RPC method
  iritamod.validator.QueryValidatorResponse:
    type: object
    properties:
      validator:
        type: object
        properties:
          id:
            type: string
            format: byte
          name:
            type: string
          pubkey:
            type: string
          certificate:
            type: string
          power:
            type: string
            format: int64
          description:
            type: string
          jailed:
            type: boolean
          operator:
            type: string
            format: byte
        description: >-
          Request defines a standard for validator. The validator will
          participate the

          blockchain consensus, power determines the probability of proposing a
          new block.
    title: >-
      QueryValidatorResponse is the response type for the Query/Validator RPC
      method
  iritamod.validator.QueryValidatorsResponse:
    type: object
    properties:
      validators:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: byte
            name:
              type: string
            pubkey:
              type: string
            certificate:
              type: string
            power:
              type: string
              format: int64
            description:
              type: string
            jailed:
              type: boolean
            operator:
              type: string
              format: byte
          description: >-
            Request defines a standard for validator. The validator will
            participate the

            blockchain consensus, power determines the probability of proposing
            a new block.
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
        title: >-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding

          request message has used PageRequest
    title: >-
      QueryValidatorsResponse is the response type for the Query/Validators RPC
      method
  iritamod.validator.Validator:
    type: object
    properties:
      id:
        type: string
        format: byte
      name:
        type: string
      pubkey:
        type: string
      certificate:
        type: string
      power:
        type: string
        format: int64
      description:
        type: string
      jailed:
        type: boolean
      operator:
        type: string
        format: byte
    description: >-
      Request defines a standard for validator. The validator will participate
      the

      blockchain consensus, power determines the probability of proposing a new
      block.
  iritamod.identity.Identity:
    type: object
    properties:
      id:
        type: string
        format: byte
      pub_keys:
        type: array
        items:
          type: object
          properties:
            pub_key:
              type: string
              format: byte
            algorithm:
              type: string
              enum:
                - UnknownPubKeyAlgorithm
                - RSA
                - DSA
                - ECDSA
                - ED25519
                - SM2
              default: UnknownPubKeyAlgorithm
              description: >-
                - UnknownPubKeyAlgorithm: UnknownPubKeyAlgorithm defines an
                unknown algorithm name
                 - RSA: RSA defines a RSA algorithm name
                 - DSA: DSA defines a DSA algorithm name.
                 - ECDSA: ECDSA defines an ECDSA algorithm name.
                 - ED25519: ED25519 defines an ED25519 algorithm name.
                 - SM2: SM2 defines an SM2 algorithm name.
              title: PubKeyAlgorithm defines the algorithm names for the public key
          title: >-
            PubKey represents a public key along with the corresponding
            algorithm
      certificates:
        type: array
        items:
          type: string
      credentials:
        type: string
      owner:
        type: string
        format: byte
    title: Identity defines a struct for an identity
  iritamod.identity.PubKeyAlgorithm:
    type: string
    enum:
      - UnknownPubKeyAlgorithm
      - RSA
      - DSA
      - ECDSA
      - ED25519
      - SM2
    default: UnknownPubKeyAlgorithm
    description: >-
      - UnknownPubKeyAlgorithm: UnknownPubKeyAlgorithm defines an unknown
      algorithm name
       - RSA: RSA defines a RSA algorithm name
       - DSA: DSA defines a DSA algorithm name.
       - ECDSA: ECDSA defines an ECDSA algorithm name.
       - ED25519: ED25519 defines an ED25519 algorithm name.
       - SM2: SM2 defines an SM2 algorithm name.
    title: PubKeyAlgorithm defines the algorithm names for the public key
  iritamod.identity.PubKeyInfo:
    type: object
    properties:
      pub_key:
        type: string
        format: byte
      algorithm:
        type: string
        enum:
          - UnknownPubKeyAlgorithm
          - RSA
          - DSA
          - ECDSA
          - ED25519
          - SM2
        default: UnknownPubKeyAlgorithm
        description: >-
          - UnknownPubKeyAlgorithm: UnknownPubKeyAlgorithm defines an unknown
          algorithm name
           - RSA: RSA defines a RSA algorithm name
           - DSA: DSA defines a DSA algorithm name.
           - ECDSA: ECDSA defines an ECDSA algorithm name.
           - ED25519: ED25519 defines an ED25519 algorithm name.
           - SM2: SM2 defines an SM2 algorithm name.
        title: PubKeyAlgorithm defines the algorithm names for the public key
    title: PubKey represents a public key along with the corresponding algorithm
  iritamod.identity.QueryIdentityResponse:
    type: object
    properties:
      identity:
        type: object
        properties:
          id:
            type: string
            format: byte
          pub_keys:
            type: array
            items:
              type: object
              properties:
                pub_key:
                  type: string
                  format: byte
                algorithm:
                  type: string
                  enum:
                    - UnknownPubKeyAlgorithm
                    - RSA
                    - DSA
                    - ECDSA
                    - ED25519
                    - SM2
                  default: UnknownPubKeyAlgorithm
                  description: >-
                    - UnknownPubKeyAlgorithm: UnknownPubKeyAlgorithm defines an
                    unknown algorithm name
                     - RSA: RSA defines a RSA algorithm name
                     - DSA: DSA defines a DSA algorithm name.
                     - ECDSA: ECDSA defines an ECDSA algorithm name.
                     - ED25519: ED25519 defines an ED25519 algorithm name.
                     - SM2: SM2 defines an SM2 algorithm name.
                  title: >-
                    PubKeyAlgorithm defines the algorithm names for the public
                    key
              title: >-
                PubKey represents a public key along with the corresponding
                algorithm
          certificates:
            type: array
            items:
              type: string
          credentials:
            type: string
          owner:
            type: string
            format: byte
        title: Identity defines a struct for an identity
    title: QueryIdentityResponse is response type for the Query/Identity RPC method
  irita.ibc.ConsensusStateWithHeight:
    type: object
    properties:
      height:
        type: string
        format: uint64
        title: consensus state height
      consensus_state:
        title: consensus state
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: >-
      ConsensusStateWithHeight defines a consensus state with an additional
      height field.
  irita.ibc.IdentifiedClientState:
    type: object
    properties:
      client_id:
        type: string
        title: client identifier
      client_state:
        title: client state
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: |-
      IdentifiedClientState defines a client state with an additional client
      identifier field.
  irita.ibc.QueryClientStateResponse:
    type: object
    properties:
      client_state:
        title: client state associated with the request identifier
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_path:
        type: string
        title: merkle proof path
      proof_height:
        type: string
        format: uint64
        title: height at which the proof was retrieved
    title: >-
      QueryClientStateResponse is response type for the Query/ClientState RPC
      method
  irita.ibc.QueryClientStatesResponse:
    type: object
    properties:
      client_states:
        type: array
        items:
          type: object
          properties:
            client_id:
              type: string
              title: client identifier
            client_state:
              title: client state
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
          description: >-
            IdentifiedClientState defines a client state with an additional
            client

            identifier field.
        description: list of stored ClientStates of the chain.
      pagination:
        title: pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    description: >-
      QueryClientStatesResponse is the response type for the Query/ClientStates
      RPC

      method.
  irita.ibc.QueryConsensusStateResponse:
    type: object
    properties:
      consensus_state:
        title: >-
          consensus state associated with the client identifier at the given
          height
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_path:
        type: string
        title: merkle proof path
      proof_height:
        type: string
        format: uint64
        title: height at which the proof was retrieved
    title: >-
      QueryConsensusStateResponse is response type for the Query/ConsensusState
      RPC method
  irita.ibc.QueryConsensusStatesResponse:
    type: object
    properties:
      consensus_states:
        type: array
        items:
          type: object
          properties:
            height:
              type: string
              format: uint64
              title: consensus state height
            consensus_state:
              title: consensus state
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
          description: >-
            ConsensusStateWithHeight defines a consensus state with an
            additional height field.
        title: consensus states associated with the identifier
      pagination:
        title: pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: >-
      QueryConsensusStatesResponse is the response type for the
      Query/ConsensusStates RPC method
